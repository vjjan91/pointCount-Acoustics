[["index.html", "Source code and supporting information for Comparing point count surveys to acoustic data across a gradient of forest regeneration in the Western Ghats Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar.", " Source code and supporting information for Comparing point count surveys to acoustic data across a gradient of forest regeneration in the Western Ghats Priyanka Hari Haran Vijay Ramesh 2023-06-14 Section 1 Introduction This is the readable version that showcases analyses comparing point count data and acoustic data for a tropical bird community in the Western Ghats. 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (repo maintainer) Postdoctoral Research Associate, Cornell Lab of Ornithology 1.2 Data access The data used in this work will be archived on Zenodo. 1.2.1 Data processing 1.3 The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. "],["making-datasets-comparable.html", "Section 2 Making datasets comparable 2.1 Install required libraries 2.2 Loading point count data 2.3 Loading the acoustic data 2.4 Subset acoustic data and point count data 2.5 Evaluating both subsets of data before combining them into a single dataframe for further analysis 2.6 Bind the acoustic and point count datasets into a single dataframe", " Section 2 Making datasets comparable In this script, we will ensure that the point count data and the acoustic data are comparable to one another. 2.1 Install required libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(sf) library(raster) # for plotting library(scales) library(ggplot2) library(ggspatial) library(colorspace) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 2.2 Loading point count data # This is data from Hariharan and Raman (2021), which consists of point counts carried out across 69 sites point_counts &lt;- read.csv(&quot;data/point-count-data.csv&quot;) # add eBird species code to the point-count data for comparison with acoustic data later on species_codes &lt;- read.csv(&quot;data/species-annotation-codes.csv&quot;) # for the sake of comparability, some issues were fixed in the point-count dataset # please note that these issues were fixed using the .csv file and not through R # leading spaces were removed from the common_name # species that start with the common_name &#39;Grey&#39; were changed to &#39;Gray&#39; # merge with point_count data point_counts &lt;- left_join(point_counts, species_codes, by = &quot;common_name&quot;) # remove mammal and unidentified bird species point_counts &lt;- point_counts %&gt;% filter(bird_mammal == &quot;Bird&quot;) 2.3 Loading the acoustic data # The acoustic data consists of annotations of 10-s chunks of audio files across summer and winter months. We will load both these annotation sets and process them further to ensure that it is comparable to the point count dataset # Attach the annotation data for summer and winter # The two .csvs below are not uploaded to GitHub and can be provided upon request # Please write to Vijay Ramesh if you would like to access the raw data - vr292@cornell.edu) summer_data &lt;- read.csv(&quot;data/summer-dawn-annotations.csv&quot;) winter_data &lt;- read.csv(&quot;data/winter-dawn-annotations.csv&quot;) # combine the datasets to a single dataframe acoustic_data &lt;- bind_rows(summer_data,winter_data) names(acoustic_data) # reorder columns to ensure the species codes appear one after another acoustic_data &lt;- acoustic_data %&gt;% relocate(c(&quot;BFOW&quot;,&quot;SBEO&quot;, &quot;JUNI&quot;, &quot;ASKO&quot;, &quot;HSWO&quot;,&quot;TBWA&quot;), .after = &quot;CORO&quot;) # split the filename column into 4 columns : Site, Date, Time and Splits acoustic_data &lt;- separate(acoustic_data, col = Filename, into = c(&quot;site&quot;, &quot;date&quot;, &quot;time&quot;, &quot;splits&quot;), sep = &quot;_&quot;) 2.4 Subset acoustic data and point count data To ensure that the datasets are comparable, we carry out the following: a) Subset only data from those sites for which both point count data and acoustic data was collected. b) Similar numbers of visits to sites (for point count data and acoustic data) - in other words, if 6 point counts were carried out at a site, we want to ensure that we have a minimum of 6 acoustic ‘visits’ to the same site. # load list of sites # a subset of sites that were included in the Hariharan and Raman (2021) study were included in the Ramesh et al. (2023) study due to logistical constraints of placing audio recorders sites &lt;- read.csv(&quot;data/list-of-sites.csv&quot;) %&gt;% filter(site_id != &quot;OLCAP5B&quot;) # convert date column to YMD format using lubridate::ymd() point_counts$date &lt;- lubridate::ymd(point_counts$date) # subset point count data to only include the above list of sites point_counts &lt;- point_counts %&gt;% mutate(site_id = str_replace_all(site_id, &quot;_&quot;, &quot;&quot;)) point_counts &lt;- left_join(sites[,c(2,3,4,5)], point_counts, by = c(&quot;site_id&quot;=&quot;site_id&quot;)) # In the acoustic study, a maximum of six visits were made to each site. To ensure that the datasets are comparable, we will choose a maximum of six visits to each site from the point count study as well nSitesDays &lt;- point_counts %&gt;% dplyr::select(site_id, date) %&gt;% distinct() %&gt;% arrange(site_id) %&gt;% count(site_id) # we observed that some sites had as many as 7 visits. We will subset these to choose only six visits # unique date site combination to give you a sense of sampling uniqueSiteDate &lt;- point_counts %&gt;% group_by(site_id) %&gt;% distinct(date) # the below lines of code were written following a query on stackOverflow to select six non-consecutive visits to any site # Link: https://stackoverflow.com/questions/67212152/select-non-consecutive-dates-for-every-grouped-element-in-r nonConVisits &lt;- uniqueSiteDate %&gt;% ungroup() %&gt;% group_split(site_id) %&gt;% map_df(., ~ .x %&gt;% ungroup() %&gt;% arrange(date) %&gt;% mutate(n = 1) %&gt;% complete(date = seq.Date(first(date), last(date), by = &#39;days&#39;))%&gt;% group_by(n = cumsum(is.na(n))) %&gt;% filter(!is.na(site_id)) %&gt;% filter(row_number() %% 2 == 1) %&gt;% ungroup() %&gt;% sample_n(min(n(), 6))) %&gt;% dplyr::select(-n) # left-join with the original dataframe to subset the data pc_subset &lt;- left_join(nonConVisits, point_counts) ## subset acoustic data (similar to point count data) # first we will remove OLCAP5B - a site for which only 3 visits were made in summer and not sampled as a result of logistic reasons in winter acoustic_data &lt;- acoustic_data %&gt;% filter(!str_detect(site, &#39;OLCAP5B&#39;)) # Convert date column to YMD format using lubridate::ymd() acoustic_data$date &lt;- lubridate::ymd(acoustic_data$date) # number of visits to a particular site # only INBS04U has 5 visits because another visit was not possible due to rain nSitesDays &lt;- acoustic_data %&gt;% dplyr::select(site, date)%&gt;% distinct() %&gt;% arrange(site) %&gt;% count(site) # unique date site combination to give you a sense of sampling uniqueSiteDate &lt;- acoustic_data %&gt;% group_by(site) %&gt;% distinct(date) nonConVisits &lt;- uniqueSiteDate %&gt;% ungroup() %&gt;% group_split(site) %&gt;% map_df(., ~ .x %&gt;% ungroup() %&gt;% arrange(date) %&gt;% mutate(n = 1) %&gt;% complete(date = seq.Date(first(date), last(date), by = &#39;days&#39;))%&gt;% group_by(n = cumsum(is.na(n))) %&gt;% filter(!is.na(site)) %&gt;% filter(row_number() %% 2 == 1) %&gt;% ungroup() %&gt;% sample_n(min(n(), 6)) ) %&gt;% dplyr::select(-n) # left-join with the original dataframe to subset the data for analysis aru_subset &lt;- left_join(nonConVisits,acoustic_data) 2.5 Evaluating both subsets of data before combining them into a single dataframe for further analysis For the point count dataset, we shall remove the extra columns. For the acoustic dataset, we will dplyr::pivot_longer() and add the same columns as point count dataset before binding rows to create a single dataframe. # remove unnecessary columns from the point-count dataset pc_subset &lt;- pc_subset[,-c(4,5,6,9,11,15,17,19,20)] # add a time of day column to the point-count dataset for future calculations and a data_type column pc_subset &lt;- pc_subset %&gt;% mutate(time_of_day = case_when(start_time &gt;= 6 &amp; start_time &lt; 7 ~ &quot;6AM to 7AM&quot;, start_time &gt;= 7 &amp; start_time &lt; 8 ~ &quot;7AM to 8AM&quot;, start_time &gt;= 8 &amp; start_time &lt; 9 ~ &quot;8AM to 9AM&quot;, start_time &gt;= 9 &amp; start_time &lt;= 10 ~&quot;9AM to 10AM&quot;)) %&gt;% mutate(data_type = &quot;point_count&quot;) # rename acoustic data columns aru_subset &lt;- rename(aru_subset, site_id = site) aru_subset &lt;- rename(aru_subset, restoration_type = Restoration.Type..Benchmark.Active.Passive.) # pivot_longer the acoustic data and remove zero values aru_subset &lt;- aru_subset %&gt;% group_by(site_id, date, time, restoration_type) %&gt;% transform() %&gt;% replace(is.na(.), 0) %&gt;% summarise_at(.vars = vars(c(&quot;INPE&quot;:&quot;TBWA&quot;)),.funs = sum) %&gt;% pivot_longer(cols=INPE:TBWA, names_to = &quot;eBird_codes&quot;, values_to = &quot;number&quot;) %&gt;% filter(number != 0) # one way to remove zeros # add a start_time column based on the time the acoustic visit was started at that site-day combination # for example, if HP36P1B&#39;s first datapoint/visit came from 091000, then the start_time for all the 16-min would have the value 091000 aru_subset &lt;- aru_subset %&gt;% group_by(site_id,date) %&gt;% mutate(start_time = min(time)) %&gt;% ungroup() # add time_of_day column to indicate time-windows for when the acoustic-visit was started and add a data_type column aru_subset &lt;- aru_subset %&gt;% mutate(time_of_day = case_when(start_time &gt;= &quot;060000&quot; &amp; start_time &lt; &quot;070000&quot; ~ &quot;6AM to 7AM&quot;, start_time &gt;= &quot;070000&quot; &amp; start_time &lt; &quot;080000&quot; ~ &quot;7AM to 8AM&quot;, start_time &gt;= &quot;080000&quot; &amp; start_time &lt; &quot;090000&quot; ~ &quot;8AM to 9AM&quot;, start_time &gt;= &quot;090000&quot; &amp; start_time &lt;= &quot;100000&quot; ~ &quot;9AM to 10AM&quot;)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) # rename columns and add additional columns to ensure it is comparable to the point count dataset aru_subset &lt;- rename(aru_subset, time_segment = time) aru_subset$HSF &lt;- &quot;H&quot; aru_subset$distance &lt;- NA # add species scientific_name and common_name to the aru_subset data aru_subset &lt;- left_join(aru_subset, species_codes[,c(1,2,4)], by = &quot;eBird_codes&quot;) 2.6 Bind the acoustic and point count datasets into a single dataframe The subsequent dataframe from this code chunk can be used directly in the following scripts to run other analyses. # check the structure and names of both subsets prior to creating a single dataframe str(pc_subset) str(aru_subset) # change structures to match across subsets pc_subset$start_time &lt;- as.character(pc_subset$start_time) pc_subset$time_segment &lt;- as.character(pc_subset$time_segment) # bind_rows to create a single dataframe datSubset &lt;- bind_rows(pc_subset, aru_subset) # rename values within the restoration_type column to acronyms (for ease of plotting) datSubset &lt;- datSubset %&gt;% mutate(restoration_type = str_replace(restoration_type, &quot;Benchmark&quot;, &quot;BM&quot;)) %&gt;% mutate(restoration_type = str_replace(restoration_type, &quot;Active&quot;, &quot;AR&quot;)) %&gt;% mutate(restoration_type = str_replace(restoration_type, &quot;Passive&quot;, &quot;NR&quot;)) # write to file write.csv(datSubset, &quot;results/datSubset.csv&quot;, row.names = F) Metadata for the above dataframe is provided below: date: Date of the point count/acoustic survey (str: Date) siteid: Site name and can be cross-referenced to the list-of-sites.csv file (str: Character) restorationType: Sites can be actively restored (AR), passively restored (naturally regenerating/NR) or benchmark (undisturbed/BM) forests (str: Character) startTime: Start time for the point count and the acoustic data (str: Character) timeSegment: The point count data was carried out in three 5-min segments and indicated as 1, 2, and 3. The acoustic data was segmented into four 4-min segments and indicated by the startTime of each segment unlike the point count data (str: Character) commonName: Species common name (str: Character) number: For the point count data, this column indicates the number of individuals of a species seen/heard/flying above within a time segment. For the acoustic data, this column indicates the number of vocalizations of a species within a time segment (str: Integer) distance: For the point count data, this column indicates the distance at which an individual of a species was observed (seen) within a time segment. This number varied from 0 to 50 metres and all individuals/species above that distance was not reported in the point count dataset. For the acoustic dataset, such values are not available and marked as NA (str: Integer) HSF: Heard/Seen/Flying was recorded for the point count dataset and indicated by H/S/F. For the acoustic data, the column has been filled with the letter H only (str: Character) scientificName: Species scientific name (str: Character) eBirdCodes: The four-letter quick common name codes are indicated in this column and can be cross-referenced with the species-annotation-codes.csv file (str: Character) timeOfDay: Depending on the start times of the point count or the acoustic data survey/visit, this column indicates if a survey was within any one-hour duration between 6AM to 10AM. For example, if the start time of the point count was ‘7.42’, this column would indicate the timeOfDay as ‘7AM to 8AM’. Similarly, if the start time of the acoustic survey was ‘091000’, this column would indicated the timeOfDay as ‘9AM to 10AM’ (str: Character) dataType: Point count or acoustic data (str: Character) "],["richness-estimates.html", "Section 3 Richness estimates 3.1 Install necessary libraries 3.2 Load dataframe containing point count and acoustic data 3.3 Load species trait data 3.4 Estimate richness for point count and acoustic data 3.5 Visualize differences in richness between point count data and acoustic data 3.6 Visualize differences in richness as a function of species habitat affiliation", " Section 3 Richness estimates In this script, we will calculate species richness estimates across point count surveys and acoustic data. We estimate differences in species richness by habitat affiliation and foraging guilds. 3.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 3.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 3.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 3.4 Estimate richness for point count and acoustic data # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate richness for point count data pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate richness for acoustic data aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 3.5 Visualize differences in richness between point count data and acoustic data richness &lt;- bind_rows(pc_richness, aru_richness) # reordering factors for plotting richness$restoration_type &lt;- factor(richness$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # Here, we use functions from the package ggstatsplot (more information can be found here:https://indrajeetpatil.github.io/ggstatsplot/index.html) fig_richness &lt;- richness %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_richness, filename = &quot;figs/fig_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Significant differences in richness between acoustic data and point count data across treatment types 3.6 Visualize differences in richness as a function of species habitat affiliation Here, we examine if there are differences in species richness across treatment types (between point counts and acoustic surveys) as a function of habitat affiliation - whether a species is a rainforest specialist or an open-country generalists. # estimate richness by trait for point count data trait_pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, habitat) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate richness by trait for acoustic data trait_aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, habitat) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() # bind rows prior to visualization trait_richness &lt;- bind_rows(trait_pc_richness, trait_aru_richness) # reordering factors for plotting trait_richness$restoration_type &lt;- factor(trait_richness$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization for rainforest birds fig_rf_richness &lt;- trait_richness %&gt;% filter(habitat == &quot;RF&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_rf_richness, filename = &quot;figs/fig_rainforestBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # visualization for open-country birds fig_oc_richness &lt;- trait_richness %&gt;% filter(habitat == &quot;OC&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_oc_richness, filename = &quot;figs/fig_openCountryBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Differences in richness of rainforest birds between acoustic data and point count data across treatment types ## Visualize differences in species richness as a function of species foraging guilds Here, we examine if there are differences in species richness across treatment types (between point counts and acoustic surveys) as a function of foraging guilds - whether a species forages on the ground, understorey, mid-storey, or canopy. # estimate richness by foraging habit for point count data foraging_pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, foraging_habit) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% filter(foraging_habit != &quot;AER&quot;) %&gt;% filter(foraging_habit != &quot;AQU&quot;) %&gt;% ungroup() # estimate richness by trait for acoustic data foraging_aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, foraging_habit) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% filter(foraging_habit != &quot;AER&quot;) %&gt;% filter(foraging_habit != &quot;AQU&quot;) %&gt;% ungroup() # bind rows prior to visualization foraging_richness &lt;- bind_rows(foraging_pc_richness, foraging_aru_richness) # reordering factors for plotting foraging_richness$restoration_type &lt;- factor(foraging_richness$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # canopy birds visualization fig_can_richness &lt;- foraging_richness %&gt;% filter(foraging_habit == &quot;CAN&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_can_richness, filename = &quot;figs/fig_canopyBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # midstorey birds visualization fig_mid_richness &lt;- foraging_richness %&gt;% filter(foraging_habit == &quot;MID&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_mid_richness, filename = &quot;figs/fig_midstoreyBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # understorey birds visualization fig_und_richness &lt;- foraging_richness %&gt;% filter(foraging_habit == &quot;UND&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_und_richness, filename = &quot;figs/fig_understoreyBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # ground foraging birds visualization fig_grd_richness &lt;- foraging_richness %&gt;% filter(foraging_habit == &quot;GRD&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_grd_richness, filename = &quot;figs/fig_groundBirds_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Differences in richness of canopy birds between acoustic data and point count data across treatment types Differences in richness of midstorey birds between acoustic data and point count data across treatment types Differences in richness of understorey birds between acoustic data and point count data across treatment types ## Stacked barplots for richness across foraging guilds # reordering factors for plotting foraging_richness$restoration_type &lt;- factor(foraging_richness$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) foraging_richness$foraging_habit &lt;- factor(foraging_richness$foraging_habit, levels = c(&quot;GRD&quot;,&quot;UND&quot;,&quot;MID&quot;,&quot;CAN&quot;)) fig_stacked_forHabit &lt;- grouped_ggbarstats( data = foraging_richness, x = foraging_habit, y = data_type, counts = richness, grouping.var = restoration_type, perc.k = 1, package = &quot;ggsci&quot;, palette = &quot;category10_d3&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_stacked_forHabit, filename = &quot;figs/fig_foragingHabit_stacked.png&quot;, width = 13, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Stacked bar plots of richness by foraging guilds across treatment types for point count data and acoustic data "],["time-of-day-analyses.html", "Section 4 Time of day analyses 4.1 Install necessary libraries 4.2 Load dataframe containing point count and acoustic data 4.3 Load species trait data 4.4 What times of day have been sampled across sites? 4.5 Estimate richness by time of day 4.6 Visualize differences in richness between point count data and acoustic data", " Section 4 Time of day analyses In this script, we will assess if the time of day (1-hour segments) have an effect on the species richness. 4.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 4.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 4.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 4.4 What times of day have been sampled across sites? Here we get a sense of what times of day have been visited/sampled most across sites for point count data and acoustic surveys nSitesTime_pc &lt;- datSubset%&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% dplyr::select(site_id, time_of_day)%&gt;% distinct() %&gt;% arrange(time_of_day) %&gt;% count(time_of_day) nSitesTime_aru &lt;- datSubset%&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% dplyr::select(site_id, time_of_day)%&gt;% distinct() %&gt;% arrange(time_of_day) %&gt;% count(time_of_day) # This comparison lets us know that number of visits for the time_of_day - 9AM to 10AM is significantly different between acoustic data and point counts and we shall ignore this time segment when we carry out further analyses. 4.5 Estimate richness by time of day Here we will estimate species richness for different 1-hour segments with the expectation that richness/detections would differ between point counts and acoustic surveys. # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, time_of_day) %&gt;% summarise(totAbundance = sum(number)) %&gt;% filter(time_of_day != &quot;9AM to 10AM&quot;) %&gt;% ungroup() # estimate richness for point count data pc_richness_time &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, time_of_day) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, time_of_day) %&gt;% summarise(totDetections = sum(number)) %&gt;% filter(time_of_day != &quot;9AM to 10AM&quot;) %&gt;% ungroup() # estimate richness for acoustic data aru_richness_time &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id,restoration_type, time_of_day) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 4.6 Visualize differences in richness between point count data and acoustic data richness_time &lt;- bind_rows(pc_richness_time, aru_richness_time) # reordering factors for plotting richness_time$restoration_type &lt;- factor(richness_time$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization for different times of day # 6am to 7am fig_6am_to_7am &lt;- richness_time %&gt;% filter(time_of_day == &quot;6AM to 7AM&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_6am_to_7am, filename = &quot;figs/fig_richness_6am_to_7am.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # 7am to 8am fig_7am_to_8am &lt;- richness_time %&gt;% filter(time_of_day == &quot;7AM to 8AM&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_7am_to_8am, filename = &quot;figs/fig_richness_7am_to_8am.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # 8am to 9am fig_8am_to_9am &lt;- richness_time %&gt;% filter(time_of_day == &quot;8AM to 9AM&quot;) %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = restoration_type, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_8am_to_9am, filename = &quot;figs/fig_richness_8am_to_9am.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No significant differences in richness for 6am to 7am between acoustic data and point count data across treatment types No significant differences in richness for 7am to 8am between acoustic data and point count data across treatment types No significant differences in richness for 8am to 9am between acoustic data and point count data across treatment types "],["abundance-vs.-detections.html", "Section 5 Abundance vs. detections 5.1 Install necessary libraries 5.2 Load dataframe containing point count and acoustic data 5.3 Estimate abundance for point count and detections for acoustic data 5.4 Correlations between abundance and detections", " Section 5 Abundance vs. detections In this script, we test for correlations between abundance (as estimated from point count data) and detections (as estimated from acoustic data). 5.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 5.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 5.3 Estimate abundance for point count and detections for acoustic data Here, we make a distinction before running correlative analyses that abundance corresponds to the total number of individuals of a species detected across visits to a site and can only be calculated for point count data. In the acoustic dataset, individuals are not seen and a measure of detections (estimated as the total number of times as species was heard across ~576 10-s clips. Here 576 clips correspond to the total amount of acoustic data - 96 min (576 10-s clips) of data = 16-min of data for every visit). # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(number)) %&gt;% ungroup() 5.4 Correlations between abundance and detections # create a single dataframe data &lt;- full_join(abundance, detections)%&gt;% replace_na(list(abundance_pc = 0, detections_aru = 0)) # reordering factors for plotting data$restoration_type &lt;- factor(data$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_abund_detec &lt;- grouped_ggscatterstats( data = data, x = detections_aru, y = abundance_pc, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_detec, filename = &quot;figs/fig_abundance_vs_detections.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Positive correlations were observed between abundance (estimated through point count data) and detections (estimated through acoustic data) across treatment types "],["indicator-species-analysis.html", "Section 6 Indicator species analysis 6.1 Load necessary libraries 6.2 Load dataframe containing point count and acoustic data 6.3 Load species trait data 6.4 Estimate detections across visits for point count data and acoustic data 6.5 Indicator species analysis of the point-count dataset 6.6 Indicator species analysis for acoustic data", " Section 6 Indicator species analysis This analysis aims to identify what species are “indicators” of groups of samples or treatment type and asks if this varies between point count estimates and acoustic surveys. If the aim is to determine which species can be used as indicators of certain site group, an approach commonly used in ecology is the Indicator Value (Dufrene and Legendre, 1997). These authors defined an Indicator Value (IndVal) index to measure the association between a species and a site group. The method of Dufrene and Legendre (1997) calculates the IndVal index between the species and each site group and then looks for the group corresponding to the highest association value. Finally, the statistical significance of this relationship is tested using a permutation test. Diagnostic (or indicator) species are an important tool in vegetation science, because these species can be used to characterize and indicate specific plant community types. A statistic commonly used to determine the association (also known as fidelity, not to be confounded with the indicator value component) between species and vegetation types is Pearson’s phi coefficient of association (Chytry et al., 2002). This coefficient is a measure of the correlation between two binary vectors. The abundance-based counterpart of the phi coefficient is called the point biserial correlation coefficient (which is defined as “r.g”). See: https://cran.r-project.org/web/packages/indicspecies/vignettes/indicspeciesTutorial.pdf 6.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(indicspecies) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 6.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 6.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 6.4 Estimate detections across visits for point count data and acoustic data These detections are calculate at the site level (for a total of six visits). If the across_visit_detections = 6, that means that a species was detected every single time across each of the six visits to that site. This value ranges from 1 to 6. These detections are estimated for the indicator species analysis since the matrix required for the same cannot be a presence/absence matrix. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(across_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(across_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 6.5 Indicator species analysis of the point-count dataset The detections across visits is converted to a wide format for the sake of analysis. ## preparing the point count data for the indicator species analysis pc_indicator &lt;- pc_visit_detections %&gt;% group_by(scientific_name, site_id, restoration_type) %&gt;% pivot_wider(names_from = scientific_name, values_from = across_visit_detections, values_fill = list(across_visit_detections=0)) ## indicator species analysis indic_pc &lt;- multipatt(pc_indicator[,4:ncol(pc_indicator)], pc_indicator$restoration_type, func = &quot;r.g&quot;, control = how(nperm=999)) # analyze/summarize the results summary(indic_pc) Multilevel pattern analysis for point count data ———————————————- Association function: r.g Significance level (alpha): 0.05 Total number of species: 84 Selected number of species: 26 Number of species associated to 1 group: 18 Number of species associated to 2 groups: 8 List of species associated to each combination: Group AR #sps. 2 stat p.value Psittacula columboides 0.433 0.013 Rubigula gularis 0.387 0.032 Group BM #sps. 13 stat p.value Alcippe poioicephala 0.838 0.001 Culicicapa ceylonensis 0.783 0.001 Hypothymis azurea 0.647 0.001 Pellorneum ruficeps 0.582 0.002 Harpactes fasciatus 0.542 0.002 Ducula badia 0.540 0.002 Phylloscopus magnirostris 0.540 0.001 Cyornis pallidipes 0.522 0.001 Leptocoma minima 0.479 0.004 Chalcophaps indica 0.445 0.013 * Dicrurus paradiseus 0.437 0.010 Dicrurus aeneus 0.432 0.012 Irena puella 0.423 0.015 * Group NR #sps. 3 stat p.value Cinnyris asiaticus 0.712 0.001 Acrocephalus dumetorum 0.495 0.004 Machlolophus aplonotus 0.329 0.046 Group AR+BM #sps. 2 stat p.value Muscicapa muttui 0.530 0.003 Iole indica 0.489 0.004 Group AR+NR #sps. 6 stat p.value Pycnonotus jocosus 0.742 0.001 Streptopelia chinensis 0.714 0.001 Dicaeum concolor 0.433 0.016 * Psittacula cyanocephala 0.420 0.022 * Zosterops palpebrosus 0.392 0.031 * Orthotomus sutorius 0.372 0.042 * Signif. codes: 0 ‘’ 0.001 ‘’ 0.01 ‘’ 0.05 ‘.’ 0.1 ‘ ’ 1 6.6 Indicator species analysis for acoustic data The detections across visits is converted to a wide format for the sake of analysis. ## preparing the acoustic data for the indicator species analysis aru_indicator &lt;- aru_visit_detections %&gt;% group_by(scientific_name, site_id, restoration_type) %&gt;% pivot_wider(names_from = scientific_name, values_from = across_visit_detections, values_fill = list(across_visit_detections=0)) ## indicator species analysis indic_aru &lt;- multipatt(aru_indicator[,4:ncol(aru_indicator)], aru_indicator$restoration_type, func = &quot;r.g&quot;, control = how(nperm=999)) # analyze/summarize the results summary(indic_aru) Multilevel pattern analysis for the acoustic dataset —————————————————- Association function: r.g Significance level (alpha): 0.05 Total number of species: 115 Selected number of species: 32 Number of species associated to 1 group: 21 Number of species associated to 2 groups: 11 List of species associated to each combination: Group AR #sps. 1 stat p.value Halcyon smyrnensis 0.431 0.008 ** Group BM #sps. 15 stat p.value Alcippe poioicephala 0.689 0.001 Phylloscopus magnirostris 0.664 0.001 Cyornis pallidipes 0.655 0.001 Hypothymis azurea 0.599 0.001 Sitta frontalis 0.567 0.001 Culicicapa ceylonensis 0.565 0.002 Harpactes fasciatus 0.502 0.002 Leptocoma minima 0.482 0.003 Ducula badia 0.432 0.011 Dryocopus javensis 0.430 0.011 * Muscicapa muttui 0.424 0.013 * Accipiter trivirgatus 0.401 0.023 * Chrysocolaptes guttacristatus 0.400 0.023 * Irena puella 0.395 0.024 * Picumnus innominatus 0.367 0.036 * Group NR #sps. 5 stat p.value Orthotomus sutorius 0.487 0.004 ** Prinia hodgsonii 0.421 0.023 * Phylloscopus affinis 0.408 0.018 * Carpodacus erythrinus 0.357 0.035 * Treron affinis 0.329 0.047 * Group AR+NR #sps. 11 stat p.value Pycnonotus jocosus 0.885 0.001 Pavo cristatus 0.568 0.001 Acrocephalus dumetorum 0.522 0.002 ** Streptopelia chinensis 0.509 0.001 Merops leschenaulti 0.476 0.003 Corvus splendens 0.395 0.022 Corvus macrorhynchos 0.390 0.029 * Copsychus saularis 0.375 0.045 * Aegithina tiphia 0.375 0.035 * Psittacula cyanocephala 0.372 0.047 * Acridotheres fuscus 0.364 0.034 * Signif. codes: 0 ‘’ 0.001 ‘’ 0.01 ‘’ 0.05 ‘.’ 0.1 ‘ ’ 1 "],["body-mass.html", "Section 7 Body mass 7.1 Load necessary libraries 7.2 Load dataframe containing point count and acoustic data 7.3 Load species trait data 7.4 Visit-level detection estimates for each species 7.5 Exploring ratios of detections in point counts &amp; acoustic surveys to body mass of a species", " Section 7 Body mass In this script, we will explore relationships between the ratio of bird detections in a point count and acoustic survey and the body mass of a species. To do this, we will continue to rely on detections estimated at the site-level (similar to what was required for the indicator species analysis). To get at this measure, we estimate detections at the site level (for a total of six visits). If the across_visit_detections = 6, that means that a species was detected every single time across each of the six visits to that site. This value ranges from 1 to 6 for each species for a point count and acoustic survey. 7.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 7.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 7.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) 7.4 Visit-level detection estimates for each species We estimate the total number of detections of each species across all visits (maximum number = 6; minimum number = 1) for point count data and acoustic surveys. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(pc_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(aru_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 7.5 Exploring ratios of detections in point counts &amp; acoustic surveys to body mass of a species # create a single dataframe visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0)) # create column of ratio of detections of point counts to total number of detections from point count and acoustic data # note: if there are no detections through the acoustic survey, the ratio will be 1; if there are equal number of detections in the acoustic survey and point count data, the ratio will be 0.5; if there no detections/lesser detections in a point count compared to acoustic survey, the ratio will be between 0 and 0.5; and lastly, if there are more detections in a point count compared to an acoustic survey, the ratio will be between 0.5 and 1. visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_detections)/ (pc_visit_detections + aru_visit_detections)) # add species trait data i.e. body mass to the above dataframe visit_detections &lt;- left_join(visit_detections, trait[,c(1,26)], by = &quot;scientific_name&quot;) # log-transform body mass visit_detections$log_mass &lt;- log10(visit_detections$mass) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_bodyMass &lt;- grouped_ggscatterstats( data = visit_detections, x = log_mass, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_bodyMass, filename = &quot;figs/fig_bodyMass_detectionRatio.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Larger-bodied birds are detected more often in acoustic surveys compared to point count data across treatment types "],["frequency.html", "Section 8 Frequency 8.1 Load necessary libraries 8.2 Load dataframe containing point count and acoustic data 8.3 Load species trait data and frequency data 8.4 Process frequency data 8.5 Visit-level detection estimates for each species 8.6 Exploring ratios of detections in point counts &amp; acoustic surveys to median peak frequency of a species", " Section 8 Frequency In this script, we will explore relationships between the ratio of bird detections in a point count and acoustic survey and the median peak frequecy of a species. To do this, we will continue to rely on detections estimated at the site-level (similar to what was required for the indicator species analysis). To get at this measure, we estimate detections at the site level (for a total of six visits). If the across_visit_detections = 6, that means that a species was detected every single time across each of the six visits to that site. This value ranges from 1 to 6 for each species for a point count and acoustic survey. 8.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 8.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 8.3 Load species trait data and frequency data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) freq &lt;- read.csv(&quot;data/frequency-data.csv&quot;) 8.4 Process frequency data We will extract the median peak frequency for each species. Note: For a total of 114 species, template recordings (varying from a minimum of 2 templates to 1910 templates per species) was extracted by Meghana P Srivathsa. While extracting median peak frequency, no distinction was made between songs and calls as our aim is understand which approach detected species more across visits. # how many templates exist across species # minimum templates = 2; maximum templates = 1910 nTemplates &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% count() median_pf &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) 8.5 Visit-level detection estimates for each species We estimate the total number of detections of each species across all visits (maximum number = 6; minimum number = 1) for point count data and acoustic surveys. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(pc_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(aru_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 8.6 Exploring ratios of detections in point counts &amp; acoustic surveys to median peak frequency of a species # create a single dataframe visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0)) # create column of ratio of detections of point counts to total number of detections from point count and acoustic data # note: if there are no detections through the acoustic survey, the ratio will be 1; if there are equal number of detections in the acoustic survey and point count data, the ratio will be 0.5; if there no detections/lesser detections in a point count compared to acoustic survey, the ratio will be between 0 and 0.5; and lastly, if there are more detections in a point count compared to an acoustic survey, the ratio will be between 0.5 and 1. visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_detections)/ (pc_visit_detections + aru_visit_detections)) # join this dataframe to species trait dat dat_median &lt;- left_join(median_pf, trait, by = &quot;eBird_codes&quot;) # join the above dataframe to the detections dataset visit_detections &lt;- left_join(dat_median[,c(1:3)], visit_detections, by = &quot;scientific_name&quot;) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # removing outliers prior to visualization visit_detections &lt;- visit_detections %&gt;% filter(eBird_codes != &quot;PBFL&quot;) # Pale-billed flowerpecker # visualization fig_medFreq &lt;- grouped_ggscatterstats( data = visit_detections, x = median_peak_freq, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medFreq, filename = &quot;figs/fig_medianPeakFreq_detectionRatio.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## Rerun analyses by including only species with a minimum of 10 templates # Only a total of 87 species are left after filtering species with very few templates nTemplates_10 &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% count() %&gt;% filter(n &gt;= 10) # left-join to remove species with less than 10 templates in the frequency dataset freq_10 &lt;- left_join(nTemplates_10[,1], freq) # calculate median peak frequency median_pf_10 &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) # create a single dataframe for visit_detections visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0)) visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_detections)/ (pc_visit_detections + aru_visit_detections)) # join this dataframe to species trait dat dat_median_10 &lt;- left_join(median_pf_10, trait, by = &quot;eBird_codes&quot;) # join the above dataframe to the detections dataset visit_detections &lt;- left_join(dat_median_10[,c(1:3)], visit_detections, by = &quot;scientific_name&quot;) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # removing outliers prior to visualization visit_detections &lt;- visit_detections %&gt;% filter(eBird_codes != &quot;PBFL&quot;) # Pale-billed flowerpecker # visualization fig_medFreq_10 &lt;- grouped_ggscatterstats( data = visit_detections, x = median_peak_freq, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medFreq_10, filename = &quot;figs/fig_medianPeakFreq_min10templates_detectionRatio.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## Visualizations that do not group treatment types Here, we would like to see/visualize the relationships between the ratio of detections of point counts to total detections (point counts + acoustic data) across visits without grouping by treatment type. We will continue to use the dataframe that excludes species with less than 10 templates for the calculation of median peak frequency. # visualization fig_medFreq_overall &lt;- ggscatterstats( data = visit_detections, x = median_peak_freq, y = pc_to_total, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medFreq_overall, filename = &quot;figs/fig_medianPeakFreq_acrossTreatments_detectionRatio.png&quot;, width = 18, height = 10, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Similar to previous analyses where data was visualized by treatment types, the results do not differ when clubbed together. Birds that vocalize at higher frequencies are marginally detected more often in point count data compared to acoustic data across treatment types "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
