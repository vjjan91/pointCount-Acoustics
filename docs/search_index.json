[["index.html", "Source code and supporting information for Comparing point count surveys to acoustic data across a gradient of forest regeneration in the Western Ghats Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing", " Source code and supporting information for Comparing point count surveys to acoustic data across a gradient of forest regeneration in the Western Ghats Vijay Ramesh Priyanka Hari Haran Laurel B Symes Last compiled on 18 March, 2025 Section 1 Introduction This is the readable version that showcases analyses comparing point count data and acoustic data for a tropical bird community in the Western Ghats. 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (repo maintainer) Postdoctoral Research Associate, Cornell Lab of Ornithology 1.2 Data access The data used in this work will be archived on Zenodo. 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. "],["making-datasets-comparable.html", "Section 2 Making datasets comparable 2.1 Install required libraries 2.2 Loading point count data 2.3 Loading the acoustic data 2.4 Subset acoustic data and point count data 2.5 Evaluating both subsets of data before combining them into a single dataframe for further analysis 2.6 Bind the acoustic and point count datasets into a single dataframe", " Section 2 Making datasets comparable In this script, we will ensure that the point count data and the acoustic data are comparable to one another. We apply a series of filters to ensure that we account for broader differences in sampling methodologies to ensure that they are comparable to one another. 2.1 Install required libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(sf) library(raster) # for plotting library(scales) library(ggplot2) library(ggspatial) library(colorspace) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 2.2 Loading point count data # This is data from Hariharan and Raman (2021), which consists of point counts carried out across 69 sites point_counts &lt;- read.csv(&quot;data/point-count-data.csv&quot;) # add eBird species code to the point-count data for comparison with acoustic data later on species_codes &lt;- read.csv(&quot;data/species-annotation-codes.csv&quot;) # for the sake of comparability, some issues were fixed in the point-count dataset # please note that these issues were fixed using the .csv file and not through R # the following issues were fixed: # leading spaces were removed from the common_name # species that start with the common_name &#39;Grey&#39; were changed to &#39;Gray&#39; # merge with point_count data point_counts &lt;- left_join(point_counts, species_codes, by = &quot;common_name&quot;) # removing all mammal species and unidentified bird species point_counts &lt;- point_counts %&gt;% filter(bird_mammal == &quot;Bird&quot;) 2.3 Loading the acoustic data The acoustic data consists of annotations of 10-s chunks of audio files across summer and winter months. We will load both these annotation sets and process them further to ensure that it is comparable to the point count dataset. # Attach the annotation data for summer and winter # These two .csvs below are not uploaded to GitHub and can be provided upon request # Please write to Vijay Ramesh if you would like to access the raw data - vr292@cornell.edu) summer_data &lt;- read.csv(&quot;data/summer-dawn-annotations.csv&quot;) winter_data &lt;- read.csv(&quot;data/winter-dawn-annotations.csv&quot;) # combine the datasets to a single dataframe acoustic_data &lt;- bind_rows(summer_data, winter_data) names(acoustic_data) # reorder columns to ensure the species codes appear one after another # also include species that are present in point count data to later combine both dataframes together acoustic_data &lt;- acoustic_data %&gt;% relocate(c(&quot;BFOW&quot;, &quot;SBEO&quot;, &quot;JUNI&quot;, &quot;ASKO&quot;, &quot;HSWO&quot;, &quot;TBWA&quot;), .after = &quot;CORO&quot;) # split the filename column into 4 columns : Site, Date, Time and Splits acoustic_data &lt;- separate(acoustic_data, col = Filename, into = c(&quot;site&quot;, &quot;date&quot;, &quot;time&quot;, &quot;splits&quot;), sep = &quot;_&quot;) 2.4 Subset acoustic data and point count data To ensure that the datasets are comparable, we carry out the following: Subset only data from those sites for which both point count data and acoustic data was collected. Ensure that the dates of visits (for both point count data and acoustic data) are coming from the same season/months. It is important to clarify that while the point count data and acoustic data were collected across similar months (to match seasons), majority of the point count data were collected between November 2019 and March 2020, while the majority of the acoustic data were collected in March 2020, a few days in May 2020 (covid-19 related delays) and between December 2020 and January 2021. To ensure that the point count data and acoustic data are comparable, we exclude data from May 2020 (for the acoustic dataset) and because bird communities are often depauperate at this time (majority of the migratory bird species have departed to their breeding grounds). Similar levels of effort across sites (for point count data and acoustic data). Here, we define effort as the total number of minutes a site was surveyed. The duration of each point count at a site was 15 minutes long while the duration of each acoustic survey at a site was 16 minutes in duration. For the sake of comparability, we will compare 15-minutes of point count data to 15-minutes of acoustic data (by removing 1-min from each of acoustic ‘visits’). This will result in a total of 90 minutes of effort at each site across point count and acoustic data. # a subset of sites that were included in the Hariharan and Raman (2021) study were included in the Ramesh et al. (2023) study due to logistical constraints of placing audio recorders # we exclude OLCAP5B from the audio data as very few acoustic visits were carried out at this site sites &lt;- read.csv(&quot;data/list-of-sites.csv&quot;) %&gt;% filter(site_id != &quot;OLCAP5B&quot;) # convert date column to YMD format using lubridate::ymd() point_counts$date &lt;- lubridate::ymd(point_counts$date) # subset point count data to only include the above list of sites point_counts &lt;- point_counts %&gt;% mutate(site_id = str_replace_all(site_id, &quot;_&quot;, &quot;&quot;)) point_counts &lt;- left_join(sites[, c(2, 3, 4, 5)], point_counts, by = c(&quot;site_id&quot; = &quot;site_id&quot;) ) # To ensure that the datasets are comparable, we will choose a maximum of six visits to each site from the point count study (translating to an effort of 90 minutes per site) nSitesDays &lt;- point_counts %&gt;% dplyr::select(site_id, date) %&gt;% distinct() %&gt;% arrange(site_id) %&gt;% count(site_id) # we observed that some sites had as many as 7 visits. We will subset these to choose only six visits (see reasoning above) # unique date site combination to give you a sense of sampling uniqueSiteDate &lt;- point_counts %&gt;% group_by(site_id) %&gt;% distinct(date) # the below lines of code were written following a query on stackOverflow to select six non-consecutive visits to any site # Link: https://stackoverflow.com/questions/67212152/select-non-consecutive-dates-for-every-grouped-element-in-r nonConVisits &lt;- uniqueSiteDate %&gt;% ungroup() %&gt;% group_split(site_id) %&gt;% map_df(., ~ .x %&gt;% ungroup() %&gt;% arrange(date) %&gt;% mutate(n = 1) %&gt;% complete(date = seq.Date(first(date), last(date), by = &quot;days&quot; )) %&gt;% group_by(n = cumsum(is.na(n))) %&gt;% filter(!is.na(site_id)) %&gt;% filter(row_number() %% 2 == 1) %&gt;% ungroup() %&gt;% sample_n(min(n(), 6))) %&gt;% # change n here for nvisits dplyr::select(-n) # left-join with the original dataframe to subset the data pc_subset &lt;- left_join(nonConVisits, point_counts) # subset acoustic data (similar to point count data) # first we will remove OLCAP5B - a site for which only 3 visits were made in summer and not sampled as a result of logistic reasons in winter acoustic_data &lt;- acoustic_data %&gt;% filter(!str_detect(site, &quot;OLCAP5B&quot;)) # Convert date column to YMD format using lubridate::ymd() acoustic_data$date &lt;- lubridate::ymd(acoustic_data$date) # exclude data from May 2020 for the acoustic dataset acoustic_data &lt;- acoustic_data %&gt;% filter(!(date &gt;= &quot;2020-05-01&quot; &amp; date &lt;= &quot;2020-05-10&quot;)) # number of visits to a particular site # some sites have as many as 7 visits, but many visits have only 5 visits and only INBS04U has 4 visits # for the sake of comparability with point count data, we choose 5 visits across sites translating to effort of 80 min per site nSitesDays &lt;- acoustic_data %&gt;% dplyr::select(site, date) %&gt;% distinct() %&gt;% arrange(site) %&gt;% count(site) # unique date site combination to give you a sense of sampling uniqueSiteDate &lt;- acoustic_data %&gt;% group_by(site) %&gt;% distinct(date) # note: We could not choose non-consecutive days for the acoustic data due to heavy rain and we could only sample consecutive days for some sites # for the acoustic data, we choose 6 random visits per site randVisits &lt;- uniqueSiteDate %&gt;% ungroup() %&gt;% group_split(site) %&gt;% map_df( ., ~ .x %&gt;% ungroup() %&gt;% arrange(date) %&gt;% mutate(n = 1) %&gt;% complete(date = seq.Date(first(date), last(date), by = &quot;days&quot; )) %&gt;% group_by(n = cumsum(is.na(n))) %&gt;% filter(!is.na(site)) %&gt;% ungroup() %&gt;% sample_n(min(n(), 6)) # change n here for number of visits ) %&gt;% dplyr::select(-n) # left-join with the original dataframe to subset the data for analysis aru_subset &lt;- left_join(randVisits, acoustic_data) # remove the last 1-minute of data from each acoustic &#39;visit&#39; # since the data is split into 10-s chunks, we want to remove the last 60-seconds from the fourth 4-min segment of each acoustic visit # create row numbers for every distinct 4-minute segment within a single 16-minute visit # this is done so that we can essentially get rid of the last minute from the fourth segment. add_row_number &lt;- aru_subset %&gt;% dplyr::select(site, date, time) %&gt;% distinct() %&gt;% group_by(site, date) %&gt;% mutate(instance = row_number()) # add this back to the previous subset of data aru_subset &lt;- left_join(aru_subset, add_row_number) # remove the last-minute of data from each visit # these are the 10-s second splits that correspond to 60 seconds of data for the last minute target &lt;- c(&quot;180-190&quot;,&quot;190-200&quot;, &quot;200-210&quot;, &quot;210-220&quot;,&quot;220-230&quot;,&quot;230-240&quot;) # let&#39;s filter out the data using the row_number (4, which translates to the fourth segment of the 16-minutes) aru_to_remove &lt;- aru_subset %&gt;% filter(instance == 4 &amp; !splits %in% target) # prior to joining both datasets # get rid of the fourth instance of data for_aru_subset &lt;- aru_subset %&gt;% filter(!instance == 4) aru_subset &lt;- full_join(for_aru_subset, aru_to_remove) 2.5 Evaluating both subsets of data before combining them into a single dataframe for further analysis For the point count dataset, we shall remove the extra columns. For the acoustic dataset, we will dplyr::pivot_longer() and add the same columns as point count dataset before binding rows to create a single dataframe. # remove unnecessary columns from the point-count dataset pc_subset &lt;- pc_subset[, -c(4, 5, 6, 9, 11, 15, 17, 19, 20)] # add a time of day column to the point-count dataset for future calculations and a data_type column pc_subset &lt;- pc_subset %&gt;% mutate( time_of_day = case_when( start_time &gt;= 6 &amp; start_time &lt; 7 ~ &quot;6AM to 7AM&quot;, start_time &gt;= 7 &amp; start_time &lt; 8 ~ &quot;7AM to 8AM&quot;, start_time &gt;= 8 &amp; start_time &lt; 9 ~ &quot;8AM to 9AM&quot;, start_time &gt;= 9 &amp; start_time &lt;= 10 ~ &quot;9AM to 10AM&quot; ) ) %&gt;% mutate(data_type = &quot;point_count&quot;) # rename acoustic data columns aru_subset &lt;- rename(aru_subset, site_id = site) aru_subset &lt;- rename(aru_subset, restoration_type = Restoration.Type..Benchmark.Active.Passive.) # pivot_longer the acoustic data and remove zero values aru_subset &lt;- aru_subset %&gt;% group_by(site_id, date, time, restoration_type) %&gt;% transform() %&gt;% replace(is.na(.), 0) %&gt;% summarise_at(.vars = vars(c(&quot;INPE&quot;:&quot;TBWA&quot;)), .funs = sum) %&gt;% pivot_longer(cols = INPE:TBWA, names_to = &quot;eBird_codes&quot;, values_to = &quot;number&quot;) %&gt;% filter(number != 0) # one way to remove zeros # add a start_time column based on the time the acoustic visit was started at that site-day combination # for example, if HP36P1B&#39;s first data point/visit came from 091000, then the start_time for all the 16-min would have the value 091000 aru_subset &lt;- aru_subset %&gt;% group_by(site_id, date) %&gt;% mutate(start_time = min(time)) %&gt;% ungroup() # add time_of_day column to indicate time-windows for when the acoustic-visit was started and add a data_type column aru_subset &lt;- aru_subset %&gt;% mutate( time_of_day = case_when( start_time &gt;= &quot;060000&quot; &amp; start_time &lt; &quot;070000&quot; ~ &quot;6AM to 7AM&quot;, start_time &gt;= &quot;070000&quot; &amp; start_time &lt; &quot;080000&quot; ~ &quot;7AM to 8AM&quot;, start_time &gt;= &quot;080000&quot; &amp; start_time &lt; &quot;090000&quot; ~ &quot;8AM to 9AM&quot;, start_time &gt;= &quot;090000&quot; &amp; start_time &lt;= &quot;100000&quot; ~ &quot;9AM to 10AM&quot; ) ) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) # rename columns and add additional columns to ensure it is comparable to the point count dataset aru_subset &lt;- rename(aru_subset, time_segment = time) aru_subset$HSF &lt;- &quot;H&quot; aru_subset$distance &lt;- NA # add species scientific_name and common_name to the aru_subset data aru_subset &lt;- left_join(aru_subset, species_codes[, c(1, 2, 4)], by = &quot;eBird_codes&quot; ) 2.6 Bind the acoustic and point count datasets into a single dataframe The subsequent dataframe from this code chunk can be used directly in the following scripts to run other analyses. # check the structure and names of both subsets prior to creating a single dataframe str(pc_subset) str(aru_subset) # change structures to match across subsets pc_subset$start_time &lt;- as.character(pc_subset$start_time) pc_subset$time_segment &lt;- as.character(pc_subset$time_segment) # bind_rows to create a single dataframe datSubset &lt;- bind_rows(pc_subset, aru_subset) # rename values within the restoration_type column to acronyms (for ease of plotting) datSubset &lt;- datSubset %&gt;% mutate( restoration_type = str_replace(restoration_type, &quot;Benchmark&quot;, &quot;BM&quot;) ) %&gt;% mutate( restoration_type = str_replace(restoration_type, &quot;Active&quot;, &quot;AR&quot;) ) %&gt;% mutate( restoration_type = str_replace(restoration_type, &quot;Passive&quot;, &quot;NR&quot;) ) # write to file write.csv(datSubset, &quot;results/datSubset.csv&quot;, row.names = F) Metadata for the above dataframe is provided below: date: Date of the point count/acoustic survey (str: Date) siteid: Site name and can be cross-referenced to the list-of-sites.csv file (str: Character) restorationType: Sites can be actively restored (AR), passively restored (naturally regenerating/NR) or benchmark (undisturbed/BM) forests (str: Character) startTime: Start time for the point count and the acoustic data (str: Character) timeSegment: The point count data was carried out in three 5-min segments and indicated as 1, 2, and 3. The acoustic data was segmented into four 4-min segments and indicated by the startTime of each segment unlike the point count data (str: Character) commonName: Species common name (str: Character) number: For the point count data, this column indicates the number of individuals of a species seen/heard/flying above within a time segment. For the acoustic data, this column indicates the number of vocalizations of a species within a time segment (str: Integer) distance: For the point count data, this column indicates the distance at which an individual of a species was observed (seen) within a time segment. This number varied from 0 to 50 metres and all individuals/species above that distance was not reported in the point count dataset. For the acoustic dataset, such values are not available and marked as NA (str: Integer) HSF: Heard/Seen/Flying was recorded for the point count dataset and indicated by H/S/F. For the acoustic data, the column has been filled with the letter H only (str: Character) scientificName: Species scientific name (str: Character) eBirdCodes: The four-letter quick common name codes are indicated in this column and can be cross-referenced with the species-annotation-codes.csv file (str: Character) timeOfDay: Depending on the start times of the point count or the acoustic data survey/visit, this column indicates if a survey was within any one-hour duration between 6AM to 10AM. For example, if the start time of the point count was ‘7.42’, this column would indicate the timeOfDay as ‘7AM to 8AM’. Similarly, if the start time of the acoustic survey was ‘091000’, this column would indicated the timeOfDay as ‘9AM to 10AM’ (str: Character) dataType: Point count or acoustic data (str: Character) "],["richness-estimates.html", "Section 3 Richness estimates 3.1 Install necessary libraries 3.2 Load dataframe containing point count and acoustic data 3.3 Load species trait data 3.4 Estimate richness for point count and acoustic data 3.5 Visualize differences in richness between point count data and acoustic data 3.6 Visualize differences in richness as a function of species habitat affiliation 3.7 Visualize differences in species richness as a function of species foraging guilds 3.8 Stacked barplots for richness across foraging guilds", " Section 3 Richness estimates In this script, we will calculate species richness estimates across point count surveys and acoustic data. We estimate differences in species richness by habitat affiliation and foraging guilds. 3.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 3.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 3.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 3.4 Estimate richness for point count and acoustic data # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # total abundance by species pc_totAbundance &lt;- abundance %&gt;% group_by(scientific_name, common_name, habitat, foraging_habit) %&gt;% summarise(totAbundance = sum(totAbundance)) # species most abundant in a point count include the Nilgiri flowerpecker, Greenish Warbler, White-cheeked Barbet, Yellow-browed Bulbul, Vernal-hanging Parrot # estimate richness for point count data (calculated for each site) pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across a 15-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # total number of detections by species aru_totDetections &lt;- detections %&gt;% group_by(scientific_name, common_name, habitat, foraging_habit) %&gt;% summarise(totDetections = sum(totDetections)) # species with the highest numbers of acoustic detections across sites are the White-cheeked Barbet, Crimson-backed Sunbird, Nilgiri Flowerpecker, Red-whiskered Bulbul and Greenish Warbler # estimate richness for acoustic data aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() # how many species were detected in a point count but not acoustic data? # four species were detected that were not observed in acoustic surveys pc_not_aru &lt;- anti_join(pc_totAbundance, aru_totDetections) write.csv(pc_not_aru, &quot;results/species-in-pointCount-not-acoustics.csv&quot;, row.names = F) # how many species were detected in acoustic data but not point counts? # 31 species were detected in acoustic data, but not in point counts aru_not_pc &lt;- anti_join(aru_totDetections, pc_totAbundance) write.csv(aru_not_pc, &quot;results/species-in-acoustics-not-pointCounts.csv&quot;, row.names = F) 3.5 Visualize differences in richness between point count data and acoustic data richness &lt;- bind_rows(pc_richness, aru_richness) # Here, we use functions from the package ggstatsplot (more information can be found here:https://indrajeetpatil.github.io/ggstatsplot/index.html) fig_richness &lt;- richness %&gt;% ggbetweenstats(x = data_type, y = richness, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_richness, filename = &quot;figs/fig_richness.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Significant differences in richness between acoustic data and point count data. 3.6 Visualize differences in richness as a function of species habitat affiliation Here, we examine if there are differences in species richness between point counts and acoustic surveys as a function of habitat affiliation - whether a species is a rainforest specialist or an open-country generalists. # estimate richness by trait for point count data trait_pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id, habitat) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate richness by trait for acoustic data trait_aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id, habitat) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() # bind rows prior to visualization trait_richness &lt;- bind_rows(trait_pc_richness, trait_aru_richness) # visualization fig_trait_richness &lt;- trait_richness %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = habitat, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_trait_richness, filename = &quot;figs/fig_richness_by_trait.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Significant differences in richness of birds between acoustic data and point count data as a function of species trait 3.7 Visualize differences in species richness as a function of species foraging guilds Here, we examine if there are differences in species richness between point counts and acoustic surveys as a function of foraging guilds - whether a species forages on the ground, understorey, mid-storey, or canopy. # estimate richness by foraging habit for point count data foraging_pc_richness &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id,foraging_habit) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% filter(foraging_habit != &quot;AER&quot;) %&gt;% filter(foraging_habit != &quot;AQU&quot;) %&gt;% ungroup() # estimate richness by foraging habit for acoustic data foraging_aru_richness &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id, foraging_habit) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% filter(foraging_habit != &quot;AER&quot;) %&gt;% filter(foraging_habit != &quot;AQU&quot;) %&gt;% ungroup() # bind rows prior to visualization foraging_richness &lt;- bind_rows(foraging_pc_richness, foraging_aru_richness) # visualization fig_foraging_richness &lt;- foraging_richness %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = foraging_habit, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_foraging_richness, filename = &quot;figs/fig_richness_by_foragingGuild.png&quot;, width = 13, height = 14, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Significant differences in richness between acoustic data and point count data as a function of foraging guild 3.8 Stacked barplots for richness across foraging guilds # reordering factors for plotting foraging_richness$foraging_habit &lt;- factor(foraging_richness$foraging_habit, levels = c(&quot;GRD&quot;,&quot;UND&quot;,&quot;MID&quot;,&quot;CAN&quot;)) fig_stacked_forHabit &lt;- ggbarstats( data = foraging_richness, x = foraging_habit, y = data_type, counts = richness, perc.k = 1, package = &quot;ggsci&quot;, palette = &quot;category10_d3&quot;, plotgrid.args = list(nrow = 3), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_stacked_forHabit, filename = &quot;figs/fig_foragingHabit_stackedRichness.png&quot;, width = 13, height = 12, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Stacked bar plots of richness by foraging guilds between point count data and acoustic data "],["time-of-day-analyses.html", "Section 4 Time of day analyses 4.1 Install necessary libraries 4.2 Load dataframe containing point count and acoustic data 4.3 Load species trait data 4.4 What times of day have been sampled across sites? 4.5 Estimate richness by time of day 4.6 Visualize differences in richness between point count data and acoustic data", " Section 4 Time of day analyses In this script, we will assess if the time of day (1-hour segments) have an effect on the species richness. 4.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 4.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 4.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 4.4 What times of day have been sampled across sites? Here we get a sense of what times of day have been visited/sampled most across sites for point count data and acoustic surveys nSitesTime_pc &lt;- datSubset%&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% dplyr::select(site_id, time_of_day)%&gt;% distinct() %&gt;% arrange(time_of_day) %&gt;% count(time_of_day) %&gt;% mutate(data_type = &quot;point_count&quot;) nSitesTime_aru &lt;- datSubset%&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% dplyr::select(site_id, time_of_day)%&gt;% distinct() %&gt;% arrange(time_of_day) %&gt;% count(time_of_day) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) # This comparison lets us know that number of visits for the time_of_day - 9AM to 10AM is significantly different between acoustic data and point counts. 4.5 Estimate richness by time of day Here we will estimate species richness for different 1-hour segments with the expectation that richness/detections would differ between point counts and acoustic surveys. # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes, time_of_day) %&gt;% summarise(totAbundance = sum(number)) %&gt;% #filter(time_of_day != &quot;9AM to 10AM&quot;) %&gt;% ungroup() # estimate richness for point count data pc_richness_time &lt;- abundance %&gt;% mutate(forRichness = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(site_id, time_of_day) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes, time_of_day) %&gt;% summarise(totDetections = sum(number)) %&gt;% #filter(time_of_day != &quot;9AM to 10AM&quot;) %&gt;% ungroup() # estimate richness for acoustic data aru_richness_time &lt;- detections %&gt;% mutate(forRichness = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(site_id, time_of_day) %&gt;% summarise(richness = sum(forRichness)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 4.6 Visualize differences in richness between point count data and acoustic data richness_time &lt;- bind_rows(pc_richness_time, aru_richness_time) # visualization for different times of day fig_richness_by_time &lt;- richness_time %&gt;% grouped_ggbetweenstats(x = data_type, y = richness, grouping.var = time_of_day, xlab = &quot;Data type&quot;, ylab = &quot;Richness&quot;, pairwise.display = &quot;significant&quot;, package = &quot;ggsci&quot;, palette = &quot;default_jco&quot;, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_richness_by_time, filename = &quot;figs/fig_richness_by_time.png&quot;, width = 15, height = 10, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Significant differences in richness for 6am to 7am, 8am to 9am, and 9am to 10am (which can be ignored as a function of more visits in acoustic data at that time) but no differences in richness for 7am to 8am between acoustic data and point count data "],["indicator-species-analysis.html", "Section 5 Indicator species analysis 5.1 Load necessary libraries 5.2 Load dataframe containing point count and acoustic data 5.3 Load species trait data 5.4 Estimate detections across visits for point count data and acoustic data 5.5 Indicator species analysis of the point-count dataset 5.6 Indicator species analysis for acoustic data", " Section 5 Indicator species analysis This analysis aims to identify what species are “indicators” of groups of samples or treatment type and asks if this varies between point count estimates and acoustic surveys. If the aim is to determine which species can be used as indicators of certain site group, an approach commonly used in ecology is the Indicator Value (Dufrene and Legendre, 1997). These authors defined an Indicator Value (IndVal) index to measure the association between a species and a site group. The method of Dufrene and Legendre (1997) calculates the IndVal index between the species and each site group and then looks for the group corresponding to the highest association value. Finally, the statistical significance of this relationship is tested using a permutation test. Diagnostic (or indicator) species are an important tool in vegetation science, because these species can be used to characterize and indicate specific plant community types. A statistic commonly used to determine the association (also known as fidelity, not to be confounded with the indicator value component) between species and vegetation types is Pearson’s phi coefficient of association (Chytry et al., 2002). This coefficient is a measure of the correlation between two binary vectors. The abundance-based counterpart of the phi coefficient is called the point biserial correlation coefficient (which is defined as “r.g”). See: https://cran.r-project.org/web/packages/indicspecies/vignettes/indicspeciesTutorial.pdf 5.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(indicspecies) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 5.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 5.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) # add it to the subset data datSubset &lt;- left_join(datSubset,trait[,c(1,7,8)], by = &quot;scientific_name&quot;) 5.4 Estimate detections across visits for point count data and acoustic data These detections are calculate at the site level (for a total of five/six visits for acoustic &amp; point count data, respectively). If the across_visit_detections = 5, that means that a species was detected every single time across each of the five visits to that site. This value ranges from 1 to 5 (or 1 to 6 for point count data). These detections are estimated for the indicator species analysis since the matrix required for the same cannot be a presence/absence matrix. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(across_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes, habitat, foraging_habit) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(across_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() 5.5 Indicator species analysis of the point-count dataset The detections across visits is converted to a wide format for the sake of analysis. ## preparing the point count data for the indicator species analysis pc_indicator &lt;- pc_visit_detections %&gt;% group_by(scientific_name, site_id, restoration_type) %&gt;% pivot_wider(names_from = scientific_name, values_from = across_visit_detections, values_fill = list(across_visit_detections=0)) ## indicator species analysis indic_pc &lt;- multipatt(pc_indicator[,4:ncol(pc_indicator)], pc_indicator$restoration_type, func = &quot;r.g&quot;, control = how(nperm=999)) # analyze/summarize the results summary(indic_pc) Multilevel pattern analysis Association function: r.g Significance level (alpha): 0.05 Total number of species: 85 Selected number of species: 28 Number of species associated to 1 group: 21 Number of species associated to 2 groups: 7 List of species associated to each combination: Group AR #sps. 3 stat p.value Psittacula columboides 0.398 0.030 Zosterops palpebrosus 0.387 0.023 Corvus macrorhynchos 0.383 0.037 * Group BM #sps. 14 stat p.value Alcippe poioicephala 0.799 0.001 Culicicapa ceylonensis 0.781 0.001 Harpactes fasciatus 0.617 0.001 Hypothymis azurea 0.580 0.001 Pellorneum ruficeps 0.553 0.002 ** Cyornis pallidipes 0.535 0.001 Phylloscopus magnirostris 0.526 0.003 Ducula badia 0.498 0.002 Leptocoma minima 0.469 0.008 Irena puella 0.452 0.006 Dicrurus paradiseus 0.451 0.012 * Dicrurus aeneus 0.441 0.008 Chalcophaps indica 0.412 0.029 Chrysocolaptes guttacristatus 0.385 0.036 * Group NR #sps. 4 stat p.value Cinnyris asiaticus 0.660 0.001 Acrocephalus dumetorum 0.547 0.002 Argya subrufa 0.423 0.016 Copsychus saularis 0.386 0.029 * Group AR+BM #sps. 2 stat p.value Iole indica 0.546 0.001 * Muscicapa muttui 0.479 0.005 Group AR+NR #sps. 5 stat p.value Streptopelia chinensis 0.766 0.001 Pycnonotus jocosus 0.757 0.001 Dicaeum concolor 0.455 0.009 ** Psittacula cyanocephala 0.411 0.019 * Orthotomus sutorius 0.392 0.023 * Signif. codes: 0 ’*** 0.001 ** 0.01 ’*’ 0.05 ‘.’ 0.1 ‘ ’ 1 5.6 Indicator species analysis for acoustic data The detections across visits is converted to a wide format for the sake of analysis. ## preparing the acoustic data for the indicator species analysis aru_indicator &lt;- aru_visit_detections %&gt;% group_by(scientific_name, site_id, restoration_type) %&gt;% pivot_wider(names_from = scientific_name, values_from = across_visit_detections, values_fill = list(across_visit_detections=0)) ## indicator species analysis indic_aru &lt;- multipatt(aru_indicator[,4:ncol(aru_indicator)], aru_indicator$restoration_type, func = &quot;r.g&quot;, control = how(nperm=999)) # analyze/summarize the results summary(indic_aru) Multilevel pattern analysis Association function: r.g Significance level (alpha): 0.05 Total number of species: 112 Selected number of species: 30 Number of species associated to 1 group: 22 Number of species associated to 2 groups: 8 List of species associated to each combination: Group AR #sps. 1 stat p.value Chloropsis aurifrons 0.396 0.04 * Group BM #sps. 14 stat p.value Alcippe poioicephala 0.693 0.001 Phylloscopus magnirostris 0.637 0.001 Hypothymis azurea 0.624 0.001 Cyornis pallidipes 0.619 0.001 Sitta frontalis 0.558 0.001 Culicicapa ceylonensis 0.553 0.001 Ducula badia 0.506 0.004 ** Leptocoma minima 0.488 0.004 ** Dicrurus paradiseus 0.473 0.003 ** Irena puella 0.449 0.008 ** Harpactes fasciatus 0.443 0.009 ** Muscicapa muttui 0.430 0.015 * Iole indica 0.396 0.019 * Dryocopus javensis 0.386 0.017 * Group NR #sps. 7 stat p.value Streptopelia chinensis 0.511 0.001 Orthotomus sutorius 0.467 0.006 Carpodacus erythrinus 0.421 0.017 Phylloscopus affinis 0.408 0.025 * Tephrodornis sylvicola 0.365 0.035 * Lonchura kelaarti 0.361 0.043 * Dumetia atriceps 0.351 0.043 * Group AR+NR #sps. 8 stat p.value Pycnonotus jocosus 0.824 0.001 Acrocephalus dumetorum 0.534 0.004 Corvus splendens 0.507 0.001 Psittacula cyanocephala 0.462 0.007 Copsychus saularis 0.453 0.010 ** Pavo cristatus 0.450 0.003 ** Merops leschenaulti 0.404 0.026 * Dicrurus leucophaeus 0.388 0.027 * "],["rank-abundance-and-species-accumulation-curves-for-point-count-and-acoustic-data.html", "Section 6 Rank abundance and species accumulation curves for point count and acoustic data 6.1 Install necessary libraries 6.2 Load dataframe containing point count and acoustic data 6.3 Estimate abundance for point count data and detections for acoustic data 6.4 Create rank abundance curves 6.5 Rank-abundance models 6.6 Species accumulation curves", " Section 6 Rank abundance and species accumulation curves for point count and acoustic data Rank abundance curves and species accumulation curves have been used in ecological analyses for multiple decades now. In this script, we ask if the species that are the most abundant, also the ones that have the highest number of acoustic detections. In addition, we run analyses to assess species accumulation using abundance data from point counts and acoustic detections. 6.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) library(ggside) library(goeveg) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 6.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 6.3 Estimate abundance for point count data and detections for acoustic data Here, we make a distinction before running correlative analyses that abundance corresponds to the total number of individuals of a species detected across visits to a site and can only be calculated for point count data. In the acoustic dataset, individuals are not seen and a measure of detections (estimated as the total number of times as species was heard across ~10-s clips). # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, scientific_name) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, scientific_name) %&gt;% summarise(detections_aru = sum(number)) %&gt;% ungroup() 6.4 Create rank abundance curves ## preparing the point count data for the creation of rank abundance curves pc_rank &lt;- abundance %&gt;% group_by(site_id) %&gt;% pivot_wider(names_from = scientific_name, values_from = abundance_pc, values_fill = list(abundance_pc=0)) %&gt;% ungroup() pc_rank_mat &lt;- as.matrix(pc_rank[, 2:ncol(pc_rank)]) png(filename = &quot;figs/fig_pointCount_rankCurve.png&quot;, width = 12, height = 10, units = &quot;in&quot;, res = 300) pc_rank_curve &lt;- racurve(pc_rank_mat, nlab = 10, main = &quot;Rank-abundance curve for point count data&quot;, ylim = c(0,0.12)) dev.off() ## preparing the acoustic data for the creation of rank abundance curves aru_rank &lt;- detections %&gt;% group_by(site_id) %&gt;% pivot_wider(names_from = scientific_name, values_from = detections_aru, values_fill = list(detections_aru=0)) %&gt;% ungroup() aru_rank_mat &lt;- as.matrix(aru_rank[, 2:ncol(aru_rank)]) png(filename = &quot;figs/fig_acoustic_rankCurve.png&quot;, width = 12, height = 10, units = &quot;in&quot;, res = 300) aru_rank_curve &lt;- racurve(aru_rank_mat, nlab = 10, main = &quot;Rank-abundance curve for acoustic data&quot;, ylim = c(0,0.12)) dev.off() Rank-abundance curve for point count data uses abundance data. The top ten species (based on their ranks) are indicated in this figure. Rank-abundance curve for acoustic data uses acoustic detections. The top ten species (based on their ranks) are indicated in this figure. Based on the above two figures, we observe that the species that made up the top ten ranks are similar across methods, except the ranks are different. 6.5 Rank-abundance models Here, we fit brokenstick, preemption, log-Normal, Zipf and Zipf-Mandelbrot models of species abundance to ask if the data on abundance (from point count data) takes on a similar model of rank-abundance as data from acoustic surveys. pc_model&lt;- radfit(pc_rank_mat) aru_model &lt;- radfit(aru_rank_mat) png(filename = &quot;figs/fig_pointCount_rankModel.png&quot;, width = 12, height = 10, units = &quot;in&quot;, res = 300) plot(pc_model) dev.off() png(filename = &quot;figs/fig_acousticData_rankModel.png&quot;, width = 12, height = 10, units = &quot;in&quot;, res = 300) plot(aru_model) dev.off() Rank-abundance models across sites for point count data. Rank-abundance models across sites for acoustic data. vegan has five models, each with characteristic rank-abundance curve shapes: • Pre-emption (geometric series) • Broken stick • Log-normal • Mandelbrot (also called Zipf-Mandelbrot) • Zipf These and other rank-abundance models fall into two camps: one group is based on assumptions of niche partitioning and competition that limits species’ abundances, and the other is based on the statistical behavior of large samples. The results suggests that across sites for both point count and acoustic data, majority of the data follow a preemption model (essentially, a geometric series). For more details regarding the models, please see this useful resource: https://myweb.ttu.edu/nmcintyr/Community%20Ecology/abundance.docx (this link will take you a word document that was written by Dr. Nancy McIntyre -http://myweb.ttu.edu/nmcintyr/). The big takeway from running these rank abundance models are that majority of the sites seem to show a similar distribution of data across the approaches. 6.6 Species accumulation curves sites &lt;- 43 time_points &lt;- 6 survey_data &lt;- matrix(sample(0:1, sites * time_points, replace = TRUE), nrow = sites, ncol = time_points) colnames(survey_data) &lt;- paste(&quot;Minutes&quot;, seq(10, 50, by = 10), sep = &quot;_&quot;) rownames(survey_data) &lt;- paste(&quot;Site&quot;, 1:sites, sep = &quot;_&quot;) pc_accum &lt;- specaccum(pc_rank_mat) aru_accum &lt;- specaccum(aru_rank_mat) png(filename = &quot;figs/fig_specAccumCurves.png&quot;, width = 12, height = 10, units = &quot;in&quot;, res = 300) plot(aru_accum, ci.type = &quot;poly&quot;, col = &quot;darkgreen&quot;, lwd=2, ci.lty=0, ci.col=&quot;lightgreen&quot;, ylim = c(0,120), ylab = &quot;Exact method of species accumulation&quot;, xlab = &quot;Number of sites&quot;, main = &quot;Species accummulation curves for acoustic data (green) and point count data (blue)&quot;) plot(pc_accum, ci.type=&quot;poly&quot;, col=&quot;blue&quot;, lwd=2, ci.lty=0, ci.col=&quot;lightblue&quot;, add= TRUE) dev.off() Species accumulation curves for acoustic data and point count data "],["abundance-vs.-acoustic-detection-rates.html", "Section 7 Abundance vs. acoustic detection rates 7.1 Install necessary libraries 7.2 Load existing data 7.3 Estimate abundance from point count data and calculate acoustic detection rates from acoustic data 7.4 Correlations between acoustic detection rates and abundance from point count data 7.5 Regressions between abundance and acoustic detection rates 7.6 Plotting species-specific regression plots of abundance and acoustic detection rate 7.7 Association between abundance and acoustic detection rates across species", " Section 7 Abundance vs. acoustic detection rates In this script, we model correlations and regressions between raw abundance (as estimated via point count data) and acoustic detection rates (calculated from acoustic data). Here, abundance corresponds to the total number of individuals of a species detected across visits and sites and can only be calculated for point count data. Here, we will calculate a measure which we define as acoustic detection rate. Acoustic detection rate is calculated as the number of vocalizations/detections in each 10-s audio file over the total number of 10-s audio files analyzed across visits and sites. An example for the same is provided below: Each site can have around 4 to 6 15-min acoustic surveys. This would mean that the total number of 10-s clips for a site would range from 360 to 540 (15-minutes = 900s = a total of 90 10-s audio files. Across 4 or 6 visits, this number would be 90x4 or 90x6). Hence, the acoustic detection rate for each species at a site is defined as (x number of vocalizations or acoustic detections)/(total number of 10-s clips analyzed). 7.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) library(ggside) library(sjPlot) library(emmeans) library(scales) library(glmmTMB) library(ggeffects) library(performance) # function to z-transform data scale_z &lt;- function(x){ (x - mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE) } # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 7.2 Load existing data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 7.3 Estimate abundance from point count data and calculate acoustic detection rates from acoustic data # point-count data # estimate total abundance of all species for each site across visits abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% ungroup() # for acoustic data, we will first estimate the number of visits to a site, which will essentially translate to the number of 10-s clips that were analyzed/heard (used here as the time period for the calculation of vocalization rates) # nVisits is calculated here # except for INBS04U, msot sites had a total of 5 or 6 visits, while INBS04U had 4 visits nSitesDays &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% dplyr::select(site_id, date)%&gt;% distinct() %&gt;% arrange(site_id) %&gt;% count(site_id) %&gt;% rename(nVisits = n) # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(number)) %&gt;% ungroup() # estimating acoustic detection rates for each species for each site aruRate &lt;- detections %&gt;% left_join(., nSitesDays, by = &quot;site_id&quot;) %&gt;% mutate(nClips = nVisits*90) %&gt;% mutate(aruRate = detections_aru/nClips) # Note that the column aruRate can vary between 0 to 1 for each species for each site (this value can vary across sites for each species, referring to how vocally active a species is) 7.4 Correlations between acoustic detection rates and abundance from point count data Here, we correlate abundance from point count data with acoustic detection rates from audio data. # create a single dataframe data &lt;- full_join(abundance, aruRate)%&gt;% replace_na(list(abundance_pc = 0, detections_aru = 0, nVisits = 0, nClips = 0, aruRate = 0)) # previously, we subset species to only include those had a minimum abundance of 20 in point counts. We carry out a similar analysis to only include species that had a minimum of 20 detections in point count data and 20 detections in audio data. spp_subset &lt;- data %&gt;% group_by(common_name) %&gt;% summarise(abundance_pc = sum(abundance_pc), detections_aru = sum(detections_aru)) %&gt;% ungroup() %&gt;% filter(abundance_pc &gt;=20 &amp; detections_aru &gt;= 20) # subset data # we have 45 species in total data &lt;- data %&gt;% filter(common_name %in% spp_subset$common_name) ## remove rows which have no data in either point count or acoustics # check with Andrew? # data &lt;- data %&gt;% # filter(abundance_pc != 0) %&gt;% # filter(aruRate != 0) # visualization fig_abund_aruRate_cor &lt;- ggscatterstats( data = data, y = abundance_pc, x = aruRate, type = &quot;r&quot;, ylab = &quot;Abundance (point-count)&quot;, xlab = &quot;Acoustic detection rate&quot;, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) # Statistically significant and positive correlations were observed between acoustic detection rates and abundance from point counts when data for all 45 species across sites and visits were pooled ggsave(fig_abund_aruRate_cor, filename = &quot;figs/fig_aruRate_vs_abundance_correlations.png&quot;, width = 14, height = 10, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## grouping data across sites (rerunning correlations at the species-level) # grouping point count data species_group &lt;- data %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(abundance_pc), aruRate = sum(aruRate)) %&gt;% ungroup() # visualization fig_abund_aruRate_species &lt;- ggscatterstats( data = species_group, y = abundance_pc, x = aruRate, type = &quot;r&quot;, ylab = &quot;Abundance (point-count)&quot;, xlab = &quot;Acoustic detection rate&quot;, label.var = common_name, label.expression = abundance_pc &gt; 200, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_aruRate_species, filename = &quot;figs/fig_aruRate_vs_abundance_correlations_speciesLevel.png&quot;, width = 14, height = 10, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() 7.5 Regressions between abundance and acoustic detection rates data &lt;- setDT(data) # extract t-value data[, t_value := summary(lm(abundance_pc ~ aruRate))$coefficients[6], by = common_name] # extract slope data[, slope := lm(abundance_pc ~aruRate)%&gt;% coef()%&gt;% nth(2), by = common_name] # extract pearson&#39;s correlation data[, pearson := cor(abundance_pc, aruRate), by = common_name] # extract adjusted r squared data[, r_sq := summary(lm(abundance_pc ~ aruRate))$adj.r.squared, by = common_name] # create a column with the direction of the slope (whether it is positive or negative), which can be referred to later while plotting data[, slope_dir := ifelse(slope &gt;0, &#39;+&#39;, &#39;-&#39;)] paste(&quot;Positive regressions:&quot;,length(unique(data$common_name[data$slope_dir %in% c(&#39;+&#39;)]))) # 39 species had a positive regression or slope value ## visualization fig_aruRate_abund_reg &lt;- ggplot(data, aes(x = aruRate, y = abundance_pc)) + geom_point(color = &quot;#9CC3D5&quot;,size = 1.2) + geom_smooth(data = data, aes(group = common_name, color = slope_dir), method = &#39;lm&#39;, se = FALSE, linewidth = 0.7) + scale_color_manual(values=c(&quot;#1B9E77&quot;, &quot;#D95F02&quot;)) + labs(x=&quot;\\nAcoustic detection rate&quot;, y=&quot;Abundance (from point count data)\\n&quot;) + theme_bw() + annotate(&quot;text&quot;, y=18, x=0.9, label= &quot;Slope:&quot;, col = &quot;grey30&quot;, size = 12) + annotate(&quot;text&quot;, y=16, x=0.9, label= &quot;+&quot;, col = &quot;#D95F02&quot;, size = 12) + annotate(&quot;text&quot;, y = 13, x=0.9, label = &quot;-&quot;, col = &quot;#1B9E77&quot;, size = 12)+ theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), legend.position = &quot;none&quot;) ggsave(fig_aruRate_abund_reg, filename = &quot;figs/fig_aruRate_vs_abundance_regressions.png&quot;, width = 14, height = 12, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # extract the slope, t_value, pearson correlation and the adjusted r square lm_output &lt;- data %&gt;% dplyr::select(common_name, t_value, slope, pearson, slope_dir,r_sq) %&gt;% distinct() # write the values to file write.csv(lm_output, &quot;results/aruRates-abundance-regressions.csv&quot;, row.names = F) Of the 46 species for which acoustic detection rates were regressed with abundance (from point count data), 39 species showed a positive slope. 7.6 Plotting species-specific regression plots of abundance and acoustic detection rate # visualization plots &lt;- list() for(i in 1:length(unique(data$common_name))){ # extract species common name a &lt;- unique(data$common_name)[i] # subset data for plotting for_plot &lt;- data[data$common_name==a,] # create plots plots[[i]] &lt;- ggplot(for_plot, aes(x = aruRate, y = abundance_pc)) + geom_point(color = &quot;#9CC3D5&quot;,size = 1.2) + geom_smooth(aes(color = &quot;#D95F02&quot;), method = &#39;lm&#39;, se = TRUE, linewidth = 0.7) + labs(title = paste0(a,&quot; &quot;,&quot;r_sq = &quot;, signif(for_plot$r_sq, digits = 2), &quot; &quot;, paste0(&quot;slope = &quot;,signif(for_plot$slope, digits = 4))), x=&quot;\\nAcoustic detection rates (from acoustic data)&quot;, y=&quot;Abundance (from point count data)\\n&quot;) + theme_bw() + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), legend.position = &quot;none&quot;) } # plot and save as a single pdf cairo_pdf( filename = &quot;figs/aruRate-abundance-by-species-regressions.pdf&quot;, width = 13, height = 12, onefile = TRUE ) plots dev.off() 7.7 Association between abundance and acoustic detection rates across species Here, we run a generalized linear mixed effects model to test for associations between abundance and acoustic detection rates. ## all birds model m1 &lt;- glmmTMB(abundance_pc ~ aruRate + (1|common_name) + (1|site_id), family=gaussian(), data = data) summary(m1) plot_model(m1, type = &quot;re&quot;) plot(ggpredict(m1)) r2(m1) "],["r-sq-vs.-species-traits-and-calling-rates.html", "Section 8 r sq vs. species traits and calling rates 8.1 Load necessary libraries 8.2 Load species trait data and frequency data 8.3 Load dataframe containing point count and acoustic data 8.4 Load adjusted r squared values from previous script 8.5 Body mass and R squared values 8.6 Median peak frequency and R squared values 8.7 Median peak amplitude and R squared values 8.8 Calling rate and R squared values", " Section 8 r sq vs. species traits and calling rates In this script, we will plot the adjusted r squared values (derived from the regressions analysis) against species-specific traits. 8.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggpubr) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) library(ggrepel) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 8.2 Load species trait data and frequency data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) freq &lt;- read.csv(&quot;data/frequency-data.csv&quot;) sociality &lt;- read.csv(&quot;data/sociality-data.csv&quot;) 8.3 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 8.4 Load adjusted r squared values from previous script r_sq &lt;- read.csv(&quot;results/aruRates-abundance-regressions.csv&quot;) 8.5 Body mass and R squared values Are species of a certain body mass showing stronger/poorer R squared values (between abundance and acoustic detections)? r_sq_trait &lt;- left_join(r_sq, trait, by = &quot;common_name&quot;) # log transform body mass r_sq_trait$log_mass &lt;- log10(r_sq_trait$mass) # visualization fig_bodyMass_rSqValue &lt;- ggplot(r_sq_trait, aes(x=log_mass,y=r_sq)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.85, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 0.75, aes(label = ..rr.label..), size = 8) + labs(y=&quot;\\nAdjusted R-Squared value between acoustic detection rate and abundance (point-counts)&quot;, x=&quot;Log mass\\n&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_bodyMass_rSqValue, filename = &quot;figs/fig_bodyMass_adjustedrSq.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Weak fit - in other words, larger-bodied birds do not necessarily have a stronger fit between acoustic detections and abundance (from point count data) 8.6 Median peak frequency and R squared values # Only a total of 87 species are left after filtering species with very few templates nTemplates_10 &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% count() %&gt;% filter(n &gt;= 10) # left-join to remove species with less than 10 templates in the frequency dataset freq_10 &lt;- left_join(nTemplates_10[,1], freq) # calculate median peak frequency median_pf &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) # add scientific_name to median_pf median_pf &lt;- left_join(median_pf, trait[,c(1,2,4)], by = &quot;eBird_codes&quot;) # join r sq and median pf dataframes r_sq_freq &lt;- left_join(r_sq, median_pf, by = &quot;common_name&quot;) # visualization fig_medianPeakFreq_rSqValue &lt;- ggplot(r_sq_freq, aes(x=median_peak_freq,y=r_sq)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.85, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 0.65, aes(label = ..rr.label..), size = 8) + labs(y=&quot;\\nAdjusted R-Squared value between acoustic detection rate and abundance (point-counts)&quot;, x=&quot;Median Peak Frequency\\n&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_medianPeakFreq_rSqValue, filename = &quot;figs/fig_medianPeakFrequency_adjustedrSq.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No association between adjusted RSq values and median peak frequency 8.7 Median peak amplitude and R squared values # calculate median peak amplitude # we extract only the median of the 95th percentile of values median_amp &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% filter(peak_amp &gt;= quantile(peak_amp, 0.95, na.rm = T)) %&gt;% summarise(median_peak_amp = median(peak_amp)) # add scientific_name to median_amp median_amp &lt;- left_join(median_amp, trait[,c(1,2,4)], by = &quot;eBird_codes&quot;) median_amp$log_median_peak_amp &lt;- log10(median_amp$median_peak_amp) # join r sq and median amplitude dataframes r_sq_amp &lt;- left_join(r_sq, median_amp, by = &quot;common_name&quot;) # visualization fig_medianPeakAmplitude_rSqValue &lt;- ggplot(r_sq_amp, aes(x=log_median_peak_amp,y=r_sq)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.85, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 0.65, aes(label = ..rr.label..), size = 8) + labs(y=&quot;\\nAdjusted R-Squared value between acoustic detection rate and abundance (point-counts)&quot;, x=&quot;log(Median Peak Amplitude)\\n&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_medianPeakAmplitude_rSqValue, filename = &quot;figs/fig_medianPeakAmplitude_adjustedrSq.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No association between adjusted RSq values and median peak amplitude 8.8 Calling rate and R squared values How does the coefficient of determination (tightness of fit between acoustic detection rate and abundance from point count data) compare to the calling rate? Here, calling rate for each species is defined as the total acoustic detections divided by the total number of individuals (from point counts). We aim to ask if species that have higher calling rate per individual have a stronger relationship between acoustics and point count data. # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(number)) %&gt;% ungroup() # create a single dataframe data &lt;- full_join(abundance, detections)%&gt;% replace_na(list(abundance_pc = 0, detections_aru = 0)) # identifying species that need to be kept # only those species that have a minimum abundance value of 10 and minimum detection value of 10 spp_subset &lt;- data %&gt;% group_by(common_name) %&gt;% summarise(abundance_pc = sum(abundance_pc), detections_aru = sum(detections_aru)) %&gt;% ungroup() %&gt;% filter(abundance_pc &gt;=20) # subset data dat_subset &lt;- data %&gt;% filter(common_name %in% spp_subset$common_name) # summarizing data (to join with the dataframe on R sq values) dat_subset &lt;- dat_subset %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(abundance_pc), detections_aru = sum(detections_aru)) %&gt;% ungroup() # join with r squared dataframe r_sq_callingRate &lt;- left_join(r_sq, dat_subset, by = &quot;common_name&quot;) # extract calling rate r_sq_callingRate$calling_rate &lt;- r_sq_callingRate$detections_aru/r_sq_callingRate$abundance_pc ## visualization fig_calling_rate_rSq &lt;- ggplot(r_sq_callingRate, aes(x=calling_rate,y=r_sq)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.85, aes(label = ..eq.label..), size = 6, family = &quot;Century Gothic&quot;) + stat_regline_equation(label.y = 0.75, aes(label = ..rr.label..), size = 6, family = &quot;Century Gothic&quot;) + labs(y=&quot;\\nAdjusted R-Squared value between acoustic detection rate and abundance (point-counts)&quot;, x=&quot;Calling rate\\n&quot;) + geom_text_repel(aes(label = scientific_name),family = &quot;Century Gothic&quot;, fontface = &quot;italic&quot;)+ theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;,size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_calling_rate_rSq, filename = &quot;figs/fig_callingRate_adjustedrSq.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No clear association between adjusted RSq values and calling rate "],["r-value-vs.-species-traits.html", "Section 9 r value vs. species traits 9.1 Load necessary libraries 9.2 Load species trait data and frequency data 9.3 Load correlation scores from previous script 9.4 Body mass and correlation scores", " Section 9 r value vs. species traits In this script, we will plot the correlation scores (derived from the abundance vs. detections script) against species-specific traits to test if the strength of correlation varies as a function of species traits. 9.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggpubr) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 9.2 Load species trait data and frequency data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) freq &lt;- read.csv(&quot;data/frequency-data.csv&quot;) 9.3 Load correlation scores from previous script corr &lt;- read.csv(&quot;results/correlationScores-abundance-detections.csv&quot;) 9.4 Body mass and correlation scores Are species of a certain body mass showing stronger/poorer correlations/effect size scores (between abundance and acoustic detections)? corr_trait &lt;- left_join(corr, trait, by = &quot;scientific_name&quot;) # log transform body mass corr_trait$log_mass &lt;- log10(corr_trait$mass) # visualization fig_bodyMass_rValue &lt;- ggplot(corr_trait, aes(x=log_mass,y=estimate)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.55, aes(label = ..eq.label..)) + stat_regline_equation(label.y = 0.6, aes(label = ..rr.label..)) + labs(y=&quot;\\nCorrelation score (r) between abundance (point-counts) and acoustic detections&quot;, x=&quot;Log mass\\n&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_bodyMass_rValue, filename = &quot;figs/fig_bodyMass_rValue.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## Median peak frequency and correlation scores Are species that vocalize at a certain peak frequency showing stronger/poorer correlations/effect size scores (between abundance and acoustic detections)? # calculate median peak frequency median_pf &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) # join with the above dataframe that contains correlation scores corr_trait &lt;- left_join(corr_trait, median_pf, by = &quot;eBird_codes&quot;) # log transform median peak frequency corr_trait$log_freq &lt;- log10(corr_trait$median_peak_freq) # visualization fig_medianPeakFreq_rValue &lt;- ggplot(corr_trait, aes(x=log_freq,y=estimate)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 0.55, aes(label = ..eq.label..)) + stat_regline_equation(label.y = 0.6, aes(label = ..rr.label..)) + labs(y=&quot;\\nCorrelation score (r) between abundance (point-counts) and acoustic detections&quot;, x=&quot;Log median peak frequency\\n&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_medianPeakFreq_rValue, filename = &quot;figs/fig_medianPeakFreq_rValue.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No particular association/very weak result observed between the median peak frequency at which a species vocalizes and the correlation score/effect size values "],["abundance-and-detections-repeatability-analyses.html", "Section 10 Abundance and detections repeatability analyses 10.1 Install necessary libraries 10.2 Load dataframe containing point count and acoustic data 10.3 Estimate abundance for point count data and detections for acoustic data 10.4 Run analysis at the level of each species (across all sites and treatments combined) for point count data 10.5 Run analysis at the level of each species (across all sites and treatments combined) for acoustic data 10.6 Mix and match acoustic data and point count surveys", " Section 10 Abundance and detections repeatability analyses In this script, we will subsample data from the point count and acoustic dataset and test if the abundance and acoustic detections are repeatable across seasons. 10.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) library(ggside) library(MASS) library(scales) library(rr2) library(ggnewscale) library(ggpubr) library(gridtext) library(broom) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 10.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 10.3 Estimate abundance for point count data and detections for acoustic data Here, we make a distinction before running correlative analyses that abundance corresponds to the total number of individuals of a species detected across visits to a site and can only be calculated for point count data. In the acoustic dataset, individuals are not seen and a measure of detections (estimated as the total number of times as species was heard across ~576 10-s clips). Here 576 clips correspond to the total amount of acoustic data - 96 min (576 10-s clips) of data = 16-min of data for every visit). Here, we also add a vist_number column to each object to ease subsampling of data. # point-count data # estimate total abundance across all species for each site # include a vist_number column to sub sample data later on abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, date) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% mutate(visit_number = row_number()) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across all sites # include a vist_number column to sub sample data later on detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes, date) %&gt;% summarise(detections_aru = sum(number)) %&gt;% mutate(visit_number = row_number()) %&gt;% ungroup() # note: we have six visits to each site for point count data but only a maximum of five visits per site for acoustic detections data 10.4 Run analysis at the level of each species (across all sites and treatments combined) for point count data Here we run analyses separately for point count data and acoustic data. First, we will filter data by visits (choosing the 1st, 3rd and 5th visit) to a site and calculate total abundance for each species. We will repeat the above by choosing the 2nd, 4th, and 6th visit to a site and calculate total abundance for each species. # grouping point count data # 1st, 3rd, and 5th visit abundance_groupA &lt;- abundance %&gt;% filter(visit_number %in% c(1,3,5)) %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_groupA = sum(abundance_pc)) %&gt;% ungroup() # 2nd, 4th, and 6th visit abundance_groupB &lt;- abundance %&gt;% filter(visit_number %in% c(2,4,6)) %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_groupB = sum(abundance_pc)) %&gt;% ungroup() # create a single dataframe abund_data_group &lt;- full_join(abundance_groupA, abundance_groupB) %&gt;% replace_na(list(abundance_groupA = 0, abundance_groupB = 0)) # visualization correlation fig_abund_A_vs_B &lt;- ggscatterstats( data = abund_data_group, x = abundance_groupB, y = abundance_groupA, type = &quot;r&quot;, xlab = &quot;Abundance data from the 2nd, 4th, and 6th visits&quot;, ylab = &quot;Abundance data from the 1st, 3rd, and 5th visits&quot;, label.var = scientific_name, label.expression = abundance_groupA &gt; 10, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_A_vs_B, filename = &quot;figs/fig_abundance_repeatability_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## repeat the above visualizations with regressions fig_abundA_vs_abundB_reg &lt;- ggplot(abund_data_group, aes(x=abundance_groupA,y=abundance_groupB)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 100, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 150, aes(label = ..rr.label..), size = 8) + labs(y=&quot;Abundance data from the 2nd, 4th, and 6th visits&quot;, x=&quot;Abundance data from the 1st, 3rd, and 5th visits&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_abundA_vs_abundB_reg, filename = &quot;figs/fig_abundance_repeatability_regressions.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Positive correlations were observed for the repeatability analysis for point count data 10.5 Run analysis at the level of each species (across all sites and treatments combined) for acoustic data First, we will filter data by visits (choosing the 1st, 3rd, and 5th visit) to a site and calculate total detections for each species. We will repeat the above by choosing the 2nd, and 4th visit to a site and calculate total detections for each species. We make a note that we do not have sufficient number of visits to equally divide/subsample them for acoustic data. # grouping acoustic data # 1st, 3rd, and 5th visit detections_groupA &lt;- detections %&gt;% filter(visit_number %in% c(1,3,5)) %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_groupA = sum(detections_aru)) %&gt;% ungroup() # 2nd and 4th visit detections_groupB &lt;- detections %&gt;% filter(visit_number %in% c(2,4)) %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_groupB = sum(detections_aru)) %&gt;% ungroup() # create a single dataframe detec_data_group &lt;- full_join(detections_groupA, detections_groupB) %&gt;% replace_na(list(detections_groupA = 0, detections_groupB = 0)) # visualization fig_detec_A_vs_B &lt;- ggscatterstats( data = detec_data_group, x = detections_groupB, y = detections_groupA, type = &quot;r&quot;, xlab = &quot;Acoustic detections from the 2nd and 4th visits&quot;, ylab = &quot;Acoustic detections from the 1st, 3rd, and 5th visits&quot;, label.var = scientific_name, label.expression = detections_groupA &gt; 10, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_detec_A_vs_B, filename = &quot;figs/fig_detections_repeatability_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## repeat the above visualizations with regressions fig_detecA_vs_detecB_reg &lt;- ggplot(detec_data_group, aes(x=detections_groupA,y=detections_groupB)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 1000, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 1500, aes(label = ..rr.label..), size = 8) + labs(y=&quot;Acoustic detections from the 2nd and 4th visits&quot;, x=&quot;Acoustic detections from the 1st, 3rd, and 5th visits&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_detecA_vs_detecB_reg, filename = &quot;figs/fig_detections_repeatability_regressions.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Positive correlations were observed for the repeatability analysis for acoustic data as well 10.6 Mix and match acoustic data and point count surveys Here, we create subsets of data that mix and match the abundance data and the acoustic detections to assess repeatability. detec_abund_group &lt;- full_join(abund_data_group, detec_data_group) %&gt;% replace_na(list(detections_groupA = 0, detections_groupB = 0, abundance_groupA = 0, abundance_groupB = 0)) # visualization A fig_detecA_vs_abundB &lt;- ggscatterstats( data = detec_abund_group, x = detections_groupA, y = abundance_groupB, type = &quot;r&quot;, xlab = &quot;Acoustic detections from the 1st, 3rd and 5th visits&quot;, ylab = &quot;Abundance data from the 2nd, 4th, and 6th visits&quot;, label.var = scientific_name, label.expression = detections_groupA &gt; 10, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_detecA_vs_abundB, filename = &quot;figs/fig_abundanceGroupB_vs_detectionsGroupA_repeatability_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # visualization B fig_detecB_vs_abundA &lt;- ggscatterstats( data = detec_abund_group, x = detections_groupB, y = abundance_groupA, type = &quot;r&quot;, xlab = &quot;Acoustic detections from the 2nd and 4th visits&quot;, ylab = &quot;Abundance data from the 1st, 3rd, and 5th visits&quot;, label.var = scientific_name, label.expression = detections_groupB &gt; 10, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_detecB_vs_abundA, filename = &quot;figs/fig_abundanceGroupA_vs_detectionsGroupB_repeatability_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() ## repeat the above visualizations with regressions fig_detecA_vs_abundB_reg &lt;- ggplot(detec_abund_group, aes(x=detections_groupA,y=abundance_groupB)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 150, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 200, aes(label = ..rr.label..), size = 8) + labs(y=&quot;Abundance data from the 2nd, 4th, and 6th visits&quot;, x=&quot;Acoustic detections from the 1st, 3rd, and 5th visits&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_detecA_vs_abundB_reg, filename = &quot;figs/fig_abundanceGroupB_vs_detectionsGroupA_repeatablity_regressions.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() fig_detecB_vs_abundA_reg &lt;- ggplot(detec_abund_group, aes(x=detections_groupB,y=abundance_groupA)) + geom_point(shape = 21, colour = &quot;black&quot;, fill = &quot;white&quot;, size = 2, stroke = 1)+ geom_smooth(method=&quot;lm&quot;, se=TRUE, fullrange=FALSE, level=0.95,linetype=&quot;solid&quot;) + theme_bw() + stat_regline_equation(label.y = 150, aes(label = ..eq.label..), size = 8) + stat_regline_equation(label.y = 200, aes(label = ..rr.label..), size = 8) + labs(y=&quot;Abundance data from the 1st, 3rd, and 5th visits&quot;, x=&quot;Acoustic detections from the 2nd and 4th visits &quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;)) ggsave(fig_detecB_vs_abundA_reg, filename = &quot;figs/fig_abundanceGroupA_vs_detectionsGroupB_repeatablity_regressions.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() "],["abundance-vs.-detections.html", "Section 11 Abundance vs. detections 11.1 Install necessary libraries 11.2 Load dataframe containing point count and acoustic data 11.3 Estimate abundance for point count data and detections for acoustic data 11.4 Correlations between abundance and detections 11.5 Combine site-level data to test for correlations between abundance and detections for each species (at the level of the treatment type) 11.6 Rerun analysis at the level of each species (across all sites and treatments combined) 11.7 Species-specific plots of correlations between abundance and detections 11.8 Regressions between abundance and detections 11.9 Plotting species-specific regression plots 11.10 Community-level regressions", " Section 11 Abundance vs. detections In this script, we run correlations and regressions between abundance (as estimated from point count data) and detections (as estimated from acoustic data). 11.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(ggstatsplot) library(ggside) library(MASS) library(scales) library(rr2) library(ggnewscale) library(ggpubr) library(gridtext) library(broom) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 11.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 11.3 Estimate abundance for point count data and detections for acoustic data Here, we make a distinction before running correlative analyses that abundance corresponds to the total number of individuals of a species detected across visits to a site and can only be calculated for point count data. In the acoustic dataset, individuals are not seen and a measure of detections (estimated as the total number of times as species was heard across ~576 10-s clips). Here 576 clips correspond to the total amount of acoustic data - 96 min (576 10-s clips) of data = 16-min of data for every visit). # point-count data # estimate total abundance across all species for each site abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% ungroup() # estimate total number of detections across the acoustic data # note: we cannot call this abundance as it refers to the total number of vocalizations across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(number)) %&gt;% ungroup() 11.4 Correlations between abundance and detections # create a single dataframe data &lt;- full_join(abundance, detections)%&gt;% replace_na(list(abundance_pc = 0, detections_aru = 0)) # reordering factors for plotting data$restoration_type &lt;- factor(data$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_abund_detec &lt;- grouped_ggscatterstats( data = data, x = detections_aru, y = abundance_pc, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_detec, filename = &quot;figs/fig_abundance_vs_detections_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Positive correlations were observed between abundance (estimated through point count data) and detections (estimated through acoustic data) across treatment types 11.5 Combine site-level data to test for correlations between abundance and detections for each species (at the level of the treatment type) Here, each dot in the visualization refers to a particular species and the only difference between this analysis and previous one is that the site-level variation is compressed/lost and the visualization/correlative analyses are being carried out across species and treatment types. # grouping point count data at the level of the treatment type abundance_group &lt;- data %&gt;% group_by(restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(abundance_pc)) %&gt;% ungroup() # grouping acoustic data at the level of the treatment type detections_group &lt;- data %&gt;% group_by(restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(detections_aru)) %&gt;% ungroup() # create a single dataframe # subset data to get a minimum abundance of ten and a minimum number of acoustic detections of ten data_group &lt;- full_join(abundance_group, detections_group) %&gt;% filter(abundance_pc &gt;=10 &amp; detections_aru &gt;= 10) # reordering factors for plotting data_group$restoration_type &lt;- factor(data_group$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_abund_detec_group &lt;- grouped_ggscatterstats( data = data_group, x = detections_aru, y = abundance_pc, grouping.var = restoration_type, type = &quot;r&quot;, label.var = scientific_name, label.expression = detections_aru &gt; 500, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_detec_group, filename = &quot;figs/fig_abundance_vs_detections_treatmentLevel_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Highly significant positive correlations were observed between abundance (estimated through point count data) and detections (estimated through acoustic data), when data was grouped at the level of the treatment 11.6 Rerun analysis at the level of each species (across all sites and treatments combined) Essentially a single graph that plots all the data. # grouping point count data abundance_group &lt;- data %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(abundance_pc = sum(abundance_pc)) %&gt;% ungroup() # grouping acoustic data at the level of the treatment type detections_group &lt;- data %&gt;% group_by(scientific_name, common_name, eBird_codes) %&gt;% summarise(detections_aru = sum(detections_aru)) %&gt;% ungroup() # create a single dataframe # subset data to get a minimum abundance of ten and a minimum number of acoustic detections of ten data_group &lt;- full_join(abundance_group, detections_group) %&gt;% filter(abundance_pc &gt;=10 &amp; detections_aru &gt;= 10) # visualization fig_abund_detec_community &lt;- ggscatterstats( data = data_group, x = abundance_pc, y = detections_aru, type = &quot;r&quot;, label.var = common_name, label.expression = detections_aru &gt; 4000, point.label.args = list(alpha = 0.7, size = 4, color = &quot;grey50&quot;), plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_abund_detec_community, filename = &quot;figs/fig_abundance_vs_detections_communityLevel_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Highly significant positive correlations were observed between abundance (estimated through point count data) and detections (estimated through acoustic data), when data was grouped at the community level 11.7 Species-specific plots of correlations between abundance and detections For this analysis, we will not be grouping data by treatment types for plot as we have insufficient data if we divided it up. In addition, we will remove species that were detected in only or the other method (point count or acoustic surveys). Further, we only keep species that had a minimum abundance of 10 and a minimum number of acoustic detections of 10. # identifying species that need to be kept # only those species that have a minimum abundance value of 10 and minimum detection value of 10 spp_subset &lt;- data %&gt;% group_by(scientific_name) %&gt;% summarise(abundance_pc = sum(abundance_pc), detections_aru = sum(detections_aru)) %&gt;% ungroup() %&gt;% filter(abundance_pc &gt;=10 &amp; detections_aru &gt;= 10) # subset data dat_subset &lt;- data %&gt;% filter(scientific_name %in% spp_subset$scientific_name) # visualization plots &lt;- list() metadata &lt;- data.frame() for(i in 1:length(unique(dat_subset$scientific_name))){ # extract species scientific name a &lt;- unique(dat_subset$scientific_name)[i] # subset data for plotting for_plot &lt;- dat_subset[dat_subset$scientific_name==a,] # create plots plots[[i]] &lt;- ggscatterstats( data = for_plot, x = detections_aru, y = abundance_pc, type = &quot;r&quot;, title = a, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;,size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) # write the metadata to a dataframe for later analysis # extracting information using a pre-existing function stat &lt;- extract_stats(plots[[i]])$subtitle_data stat$scientific_name &lt;- a # add it to the above empty metadata dataframe metadata &lt;- rbind(metadata, stat) } # plot and save as a single pdf cairo_pdf( filename = &quot;figs/abundance-detections-by-species-correlations.pdf&quot;, width = 13, height = 12, onefile = TRUE ) plots dev.off() # write the metadata to a .csv write.csv(metadata[,-14], # removing the expression column &quot;results/correlationScores-abundance-detections.csv&quot;, row.names = F) Running the abundance-detections correlations analysis essentially suggests that at the community level/when species are pooled across sites - there seems to be a high Pearson’s correlation value between abundance and detections (when site-level variation is include, this ranges between 0.51 to 0.55, but when site-level variation is compressed/lost/pooled across treatments, this value ranges between 0.85 to 0.87). However, when we break this result down and examine it for each species by species, we notice that the above result varies by species. At the species level, we considered a total of 48 species for this exercise. The list of 48 species only includes those that had a minimum abundance value of 10 and a minimum number of acoustic detections of 10. We observed that ~15 species showed a positive r of &gt;0.4, ~20 species showed a positive r of &gt;0.3.Nine species showed a very small positive r value between 0 and 0.2. The species that showed the highest positive r values include Pycnonotus jocosus (0.85), Hypsipetes ganeesa (0.67) and Leptocoma minima (0.66). Five species had a negative r value between 0 and -0.2. Seven species had a negative r value that ranged between -0.2 and -0.51. The three species showing a very high negative r value are Dicrurus aeneus (-0.51), Muscicapa muttui(-0.46), and Ficedula ruficauda (-0.45). 11.8 Regressions between abundance and detections While it is relevant to examine correlations between abundance (as estimated from point count data) and detections (as estimated from acoustic data), we will run robust regressions to ask one predicts the other. ## We use the dat_subset dataframe moving forward, as it contains the subset of species with a minimum of 10 abundance values and 10 acoustic detections across sites and visits ## I am borrowing code from Mikula et al. 2020 below ## The data and scripts from their manuscript can be found here: ## https://osf.io/fa9ky/ dat_subset &lt;- setDT(dat_subset) # extract t-value dat_subset[, t_value := summary(lm(detections_aru ~ abundance_pc))$coefficients[6], by = scientific_name] # extract slope dat_subset[, slope := lm(detections_aru ~ abundance_pc)%&gt;% coef()%&gt;% nth(2), by = scientific_name] # extract pearson&#39;s correlation dat_subset[, pearson := cor(detections_aru, abundance_pc), by = scientific_name] # extract adjusted r squared dat_subset[, r_sq := summary(lm(detections_aru ~ abundance_pc))$adj.r.squared, by = scientific_name] # create a column with the direction of the slope (whether it is positive or negative), which can be referred to later while plotting dat_subset[, slope_dir := ifelse(slope &gt;0, &#39;+&#39;, &#39;-&#39;)] paste(&quot;Positive regressions:&quot;,length(unique(dat_subset$scientific_name[dat_subset$slope_dir %in% c(&#39;+&#39;)]))) # 39 species had a positive regression/slope value ## visualization fig_abund_detec_reg &lt;- ggplot(dat_subset, aes(y = detections_aru, x = abundance_pc)) + geom_point(color = &quot;#9CC3D5&quot;,size = 1.2) + geom_smooth(data = dat_subset, aes(group = scientific_name, color = slope_dir), method = &#39;lm&#39;, se = FALSE, linewidth = 0.7) + scale_color_manual(values=c(&quot;#1B9E77&quot;, &quot;#D95F02&quot;)) + labs(y=&quot;\\nDetections (from acoustic data)&quot;, x=&quot;Abundance (from point count data)\\n&quot;) + theme_bw() + annotate(&quot;text&quot;, x=13, y=400, label= &quot;Slope:&quot;, col = &quot;grey30&quot;, size = 12) + annotate(&quot;text&quot;, x=16, y=400, label= &quot;+&quot;, col = &quot;#D95F02&quot;, size = 12) + annotate(&quot;text&quot;, x = 18, y=400, label = &quot;-&quot;, col = &quot;#1B9E77&quot;, size = 12)+ theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), legend.position = &quot;none&quot;) ggsave(fig_abund_detec_reg, filename = &quot;figs/fig_abundance_vs_detections_regressions_allSpecies.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() # extract the slope, t_value, pearson correlation and the adjusted r square lm_output &lt;- dat_subset %&gt;% dplyr::select(scientific_name, t_value, slope, pearson, slope_dir,r_sq) %&gt;% distinct() # write the values to file write.csv(lm_output, &quot;results/abundance-detections-regressions.csv&quot;, row.names = F) Of the 48 species for which acoustic detections were regressed with abundance (from point count data), 39 species showed a positive slope. 11.9 Plotting species-specific regression plots # visualization plots &lt;- list() for(i in 1:length(unique(dat_subset$common_name))){ # extract species scientific name a &lt;- unique(dat_subset$common_name)[37] # subset data for plotting for_plot &lt;- dat_subset[dat_subset$common_name==a,] # create plots plots[[i]] plot &lt;- ggplot(for_plot, aes(y = detections_aru, x = abundance_pc)) + geom_point(color = &quot;#9CC3D5&quot;,size = 1.2) + geom_smooth(aes(color = &quot;#D95F02&quot;), method = &#39;lm&#39;, se = TRUE, linewidth = 0.7) + labs(title = paste0(a,&quot; &quot;,&quot;r_sq = &quot;, signif(for_plot$r_sq, digits = 2), &quot; &quot;, paste0(&quot;slope = &quot;,signif(for_plot$slope, digits = 4))), y=&quot;\\nDetections (from acoustic data)&quot;, x=&quot;Abundance (from point count data)\\n&quot;) + theme_bw() + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), legend.position = &quot;none&quot;) } ggsave(plot, filename = &quot;figs/fig_lbcr.svg&quot;, width = 9, height = 9, device = svg(), units = &quot;in&quot;, dpi = 300) dev.off() # plot and save as a single pdf cairo_pdf( filename = &quot;figs/abundance-detections-by-species-regressions.pdf&quot;, width = 13, height = 12, onefile = TRUE ) plots dev.off() 11.10 Community-level regressions In this visualization, we essentially plot overall data of acoustic detections against abundance (from point count data) comm_reg &lt;- lm(detections_aru ~ abundance_pc, data=dat_subset) summary(comm_reg) # Call: # lm(formula = detections_aru ~ abundance_pc, data = dat_subset) # Residuals: # Min 1Q Median 3Q Max # -165.86 -29.50 -9.58 14.47 338.76 # Coefficients: # Estimate Std. Error t value Pr(&gt;|t|) # (Intercept) 10.5842 1.9015 5.566 3.03e-08 *** # abundance_pc 13.9575 0.4883 28.582 &lt; 2e-16 *** # Residual standard error: 56.87 on 1670 degrees of freedom # Multiple R-squared: 0.3285, Adjusted R-squared: 0.3281 # F-statistic: 816.9 on 1 and 1670 DF, p-value: &lt; 2.2e-16 # visualization fig_abund_detec_comm_reg &lt;- ggplot(dat_subset, aes(y = detections_aru,x = abundance_pc)) + geom_point(color = &quot;#9CC3D5&quot;,size = 1.2) + geom_smooth(aes(color = &quot;#D95F02&quot;), method = &#39;lm&#39;, se = TRUE, linewidth = 0.7) + labs(title = paste0(&quot;r_sq = 0.32&quot;, &quot; &quot;, paste0(&quot;estimate = 13.95&quot;)), y=&quot;\\nDetections (from acoustic data)&quot;, x=&quot;Abundance (from point count data)\\n&quot;) + theme_bw() + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), legend.position = &quot;none&quot;) ggsave(fig_abund_detec_comm_reg, filename = &quot;figs/fig_abundance_vs_detections_regressions_communityLevel.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Community-level regressions of acoustic detections and abundance (from point count data) "],["body-mass---frequency-correlations.html", "Section 12 Body mass - Frequency correlations 12.1 Load necessary libraries 12.2 Load species trait data and frequency data 12.3 Process frequency data 12.4 Visualization of correlations between body mass and frequency", " Section 12 Body mass - Frequency correlations In this script, we test for correlations between body mass and median peak frequency, with the expectation that larger-bodied species vocalize at lower frequencies compared to smaller-bodied species. 12.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) library(scales) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 12.2 Load species trait data and frequency data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) freq &lt;- read.csv(&quot;data/frequency-data.csv&quot;) 12.3 Process frequency data We will extract the median peak frequency for each species. Note: For a total of 114 species, template recordings (varying from a minimum of 2 templates to 1910 templates per species) was extracted by Meghana P Srivathsa. While extracting median peak frequency, no distinction was made between songs and calls as our aim is understand which approach detected species more across visits. Note, we removed species that had very few templates (we only kept species that had a minimum of 10 frequency related measures). # Only a total of 87 species are left after filtering species with very few templates nTemplates_10 &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% count() %&gt;% filter(n &gt;= 10) # left-join to remove species with less than 10 templates in the frequency dataset freq_10 &lt;- left_join(nTemplates_10[,1], freq) # calculate median peak frequency median_pf_10 &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) 12.4 Visualization of correlations between body mass and frequency # join the frequency data to species trait dat bm_freq &lt;- left_join(median_pf_10, trait, by = &quot;eBird_codes&quot;) # log-transform data bm_freq$log_mass &lt;- log10(bm_freq$mass) bm_freq$log_freq &lt;- log10(bm_freq$median_peak_freq) # visualization fig_medFreq_bodyMass &lt;- ggscatterstats( data = bm_freq, x = log_mass, y = log_freq, type = &quot;r&quot;, ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medFreq_bodyMass, filename = &quot;figs/fig_medianPeakFreq_bodyMass_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() A significant negative correlation was seen between median peak frequency and body mass. In line with our expectation, larger-bodied species vocalize at lower frequencies compared to smaller-bodied species. "],["body-mass.html", "Section 13 Body mass 13.1 Load necessary libraries 13.2 Load dataframe containing point count and acoustic data 13.3 Load species trait data 13.4 Visit-level detection estimates for each species 13.5 Exploring ratios of detections in point counts &amp; acoustic surveys to body mass of a species", " Section 13 Body mass In this script, we will explore relationships between the ratio of bird detections in a point count and acoustic survey and the body mass of a species. To do this, we will continue to rely on detections estimated at the site-level (similar to what was required for the indicator species analysis). To get at this measure, we estimate detections at the site level (for a total of six visits). If the across_visit_detections = 6, that means that a species was detected every single time across each of the six visits to that site. This value ranges from 1 to 6 for each species for a point count and acoustic survey. 13.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) library(scales) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 13.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 13.3 Load species trait data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) 13.4 Visit-level detection estimates for each species We estimate the total number of detections of each species across all visits. This can vary between 1 and 6 for point counts (since a total of six visits were made to each site), while this number can vary between 1 to 5 for acoustic surveys. To account for the slight difference in the number of visits, we scale the data to go between 1 and 10 (arbitrarily chosen) to ensure that the visit-level estimates are comparable. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(pc_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # scale values to go between 1 and 10 pc_visit_detections$pc_visit_scaled &lt;- rescale(pc_visit_detections$pc_visit_detections, to = c(1,10)) # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(aru_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() # scale values to go between 1 and 10 aru_visit_detections$aru_visit_scaled &lt;- rescale(aru_visit_detections$aru_visit_detections, to = c(1,10)) 13.5 Exploring ratios of detections in point counts &amp; acoustic surveys to body mass of a species # create a single dataframe visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0, pc_visit_scaled = 0, aru_visit_scaled = 0)) # create column of ratio of detections of point counts to total number of detections from point count and acoustic data # note: if there are no detections through the acoustic survey, the ratio will be 1; if there are equal number of detections in the acoustic survey and point count data, the ratio will be 0.5; if there no detections/lesser detections in a point count compared to acoustic survey, the ratio will be between 0 and 0.5; and lastly, if there are more detections in a point count compared to an acoustic survey, the ratio will be between 0.5 and 1. visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_scaled)/ (pc_visit_scaled + aru_visit_scaled)) # add species trait data i.e. body mass to the above dataframe visit_detections &lt;- left_join(visit_detections, trait[,c(1,26)], by = &quot;scientific_name&quot;) # log-transform body mass visit_detections$log_mass &lt;- log10(visit_detections$mass) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_bodyMass &lt;- grouped_ggscatterstats( data = visit_detections, x = log_mass, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_bodyMass, filename = &quot;figs/fig_bodyMass_detectionRatio_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() No particular association/very weak result observed. "],["density-estimation.html", "Section 14 Density estimation 14.1 Install necessary libraries 14.2 Load dataframe containing point count and acoustic data 14.3 Creating a distance object from point count data 14.4 Run distance analysis", " Section 14 Density estimation In this script, we estimate species-specific densities from point count data. This density estimate will be used in future scripts to assess associations with acoustic detections/vocal activity. For more details regarding distance analysis, please visit: https://distancesampling.org/ 14.1 Install necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(Distance) library(scico) library(data.table) library(extrafont) library(ggstatsplot) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 14.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 14.3 Creating a distance object from point count data To create a distance object, we need to specify the following columns within a dataframe so that they can be used to calculate abundances/densities using ds function. The ds function requires that we specify: Region.Label = This column asks if the data is coming from the same region/treatment/habitat type. In our case, we are not differentiating between an actively restored, naturally regenerating or benchmark. We are assuming that our analysis accounts for data across sites for the entire region, irrespective of treatment. Area = This column corresponds to the size of the study area and is often a placeholder, because we don’t have data on the area of each point count location. Sample.Label = This column would basically be the unique siteIDs (total of 43 locations). Effort = This column represents the total number of times you visited a site to carry out a point count (in other words, we use date as a proxy for visit). size = This column corresponds to the idea that numbers of individuals of a species at a location are clustered/are of the same group. If we specify size = number (which is our column for number of individuals), then the analysis of densities/abundance will be based on a clustered analysis. distance = The radial distance in metres to each detection. In our dataset, Hariharan and Raman (2022) used distances of 0, 5, 10, 15, 20, 30 and 50. The last distance is usually a cutoff point (50) or in other words, the distance specified suggests that the species was very far away and we cannot effectively rely on this estimate to be accurate. During the analysis, we will remove these species. # filter only point counts point_count &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) # note that we add distances of 2.5 metres for any distance &lt; 20, 5 metres for distances == 20 and 10 metres for distances == 30. The reason for doing this is to provide the centre of a particular distance band. For instance, 2.5 would be the centre for the band: 0-5 and so on and so forth. This is done for the sake of plotting and segregating data into different bins for analysis. # create a distance object by specifying names for the columns required for the analysis # create a Region.Label first point_count$Region.Label &lt;- &quot;valparai&quot; dist_object &lt;- point_count %&gt;% dplyr::select(site_id, date, Region.Label, Sample.Label = site_id, common_name, distance, size = number) %&gt;% mutate(distance = case_when(distance &lt; 20 ~ distance + 2.5, distance == 20 ~ distance + 5, distance == 30 ~ distance + 10, distance == 50 ~ distance)) # calculate effort (n=6 visits to each site) effort &lt;- point_count %&gt;% group_by(site_id) %&gt;% summarise(Effort = n_distinct(date)) %&gt;% rename(Sample.Label = site_id) # add effort back to the previous distance object dist_object &lt;- dist_object %&gt;% left_join(effort, by = &quot;Sample.Label&quot;) # get some summary statistics on distances of observations # mean distance ~ 20 meters dist_summary &lt;- dist_object %&gt;% group_by(distance) %&gt;% summarise(n()) # specify the conversion of distances in meters to hectares # note that in point counts, the only distances associated are size of study area and radial distance # we convert meters to hectares to standardize our calculation of bird densities to densities/ha conversion.factor &lt;- convert_units(&quot;metre&quot;, NULL, &quot;hectare&quot;) # provide the cutpoints or the ends of each distance bin my_cuts &lt;- c(0,5,10,15,20,30,50) 14.4 Run distance analysis While initially running distance analysis, I could not access the distance estimates for each site/station and asked Dr. Eric Rexstad for help and his suggestions are mentioned in this email thread: # unique site-date combination to account for effort site_date &lt;- point_count %&gt;% select(site_id, date) %&gt;% distinct() %&gt;% rename(Sample.Label = site_id) # keep only those species have a minimum abundance of 20 in point counts spp_subset &lt;- point_count %&gt;% group_by(common_name) %&gt;% summarise(abundance_pc = sum(number)) %&gt;% filter(abundance_pc &gt;=20) # subset data dist_object &lt;- dist_object %&gt;% filter(common_name %in% spp_subset$common_name) ## data frame to store density estimates density &lt;- data.frame() for(i in 1:length(unique(dist_object$common_name))){ # extract species common name # choosing a random species a &lt;- unique(dist_object$common_name)[i] # subset data for_analysis &lt;- dist_object[dist_object$common_name==a,] # include effort across sites where no detections were made for_analysis &lt;- full_join(for_analysis, site_date, by = c(&quot;Sample.Label&quot;,&quot;date&quot;)) %&gt;% replace_na(list(Region.Label = &quot;valparai&quot;, common_name = a, size = 0, Area = 1, Effort = 6)) # distance model model &lt;- ds(for_analysis, key = &quot;hr&quot;, transect = &quot;point&quot;, convert_units = conversion.factor, cutpoints = my_cuts, truncation = 50) # extract densities d &lt;- model$dht$individuals$bysample extract_data &lt;- data.frame(d$Sample, a, d$Dhat) names(extract_data) &lt;- c(&quot;site_id&quot;,&quot;common_name&quot;,&quot;density&quot;) density &lt;- bind_rows(density, extract_data) } # write results out write.csv(density, &quot;results/density-estimates.csv&quot;, row.names = F) # please note that the filtering of data to include only species with a total of atleast 20 detections across visits resulting in a total of 45 species. "],["frequency-and-amplitude.html", "Section 15 Frequency and amplitude 15.1 Load necessary libraries 15.2 Load dataframe containing point count and acoustic data 15.3 Load species trait data and frequency data 15.4 Process frequency data 15.5 Visit-level detection estimates for each species 15.6 Exploring ratios of detections in point counts &amp; acoustic surveys to median peak frequency of a species 15.7 Exploring center frequency instead of peak frequency 15.8 Amplitude", " Section 15 Frequency and amplitude In this script, we will explore relationships between the ratio of bird detections in a point count and acoustic survey and the median peak frequency (&amp; median center frequency &amp; median peak amplitude) of a species. To do this, we will continue to rely on detections estimated at the site-level (similar to what was required for the indicator species analysis). To get at this measure, we estimate detections at the site level (for a total of six visits). If the across_visit_detections = 6, that means that a species was detected every single time across each of the six visits to that site. This value ranges from 1 to 6 for each species for a point count survey while ranging between 1 to 5 for each species for an acoustic survey. To account for the slight difference in the number of visits, we scale the data to go between 1 and 10 (arbitrarily chosen) to ensure that the visit-level estimates are comparable. 15.1 Load necessary libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(psych) library(ecodist) library(RColorBrewer) library(ggforce) library(ggalt) library(patchwork) library(sjPlot) library(ggside) library(ggstatsplot) library(extrafont) library(scales) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 15.2 Load dataframe containing point count and acoustic data datSubset &lt;- read.csv(&quot;results/datSubset.csv&quot;) 15.3 Load species trait data and frequency data trait &lt;- read.csv(&quot;data/species-trait-dat.csv&quot;) freq &lt;- read.csv(&quot;data/frequency-data.csv&quot;) 15.4 Process frequency data We will extract the median peak frequency for each species. Note: For a total of 114 species, template recordings (varying from a minimum of 2 templates to 1910 templates per species) was extracted by Meghana P Srivathsa. While extracting median peak frequency, no distinction was made between songs and calls as our aim is understand which approach detected species more across visits. # how many templates exist across species # minimum templates = 2; maximum templates = 1910 # but keep only species with a minimum of 10 templates nTemplates &lt;- freq %&gt;% group_by(eBird_codes) %&gt;% count() %&gt;% filter(n &gt;= 10) # left-join to remove species with less than 10 templates in the frequency dataset freq_10 &lt;- left_join(nTemplates[,1], freq) # calculate median peak frequency median_pf &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% summarise(median_peak_freq = median(peak_freq_in_Hz)) # Only a total of 87 species are left after filtering species with very few templates 15.5 Visit-level detection estimates for each species We estimate the total number of detections of each species across all visits for point count data and acoustic surveys and scale them so that they are comparable. ## we will estimate abundance across point counts by site-date (essentially corresponding to visit) abundance &lt;- datSubset %&gt;% filter(data_type == &quot;point_count&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totAbundance = sum(number)) %&gt;% ungroup() # estimate across visit detections for point count data pc_visit_detections &lt;- abundance %&gt;% mutate(forDetections = case_when(totAbundance &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(pc_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;point_count&quot;) %&gt;% ungroup() # scale values to go between 1 and 10 pc_visit_detections$pc_visit_scaled &lt;- rescale(pc_visit_detections$pc_visit_detections, to = c(1,10)) # estimate total number of detections across the acoustic data by site-date (essentially corresponds to a visit) # note: we cannot call this abundance as it refers to the total number of vocalizations across a 16-min period across all sites detections &lt;- datSubset %&gt;% filter(data_type == &quot;acoustic_data&quot;) %&gt;% group_by(date, site_id, restoration_type, scientific_name, common_name, eBird_codes) %&gt;% summarise(totDetections = sum(number)) %&gt;% ungroup() # estimate across visit detections for acoustic data aru_visit_detections &lt;- detections %&gt;% mutate(forDetections = case_when(totDetections &gt; 0 ~ 1)) %&gt;% group_by(scientific_name, site_id,restoration_type) %&gt;% summarise(aru_visit_detections = sum(forDetections)) %&gt;% mutate(data_type = &quot;acoustic_data&quot;) %&gt;% ungroup() # scale values to go between 1 and 10 aru_visit_detections$aru_visit_scaled &lt;- rescale(aru_visit_detections$aru_visit_detections, to = c(1,10)) 15.6 Exploring ratios of detections in point counts &amp; acoustic surveys to median peak frequency of a species # create a single dataframe visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0, pc_visit_scaled = 0, aru_visit_scaled = 0)) # create column of ratio of detections of point counts to total number of detections from point count and acoustic data # note: if there are no detections through the acoustic survey, the ratio will be 1; if there are equal number of detections in the acoustic survey and point count data, the ratio will be 0.5; if there no detections/lesser detections in a point count compared to acoustic survey, the ratio will be between 0 and 0.5; and lastly, if there are more detections in a point count compared to an acoustic survey, the ratio will be between 0.5 and 1. visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_scaled)/ (pc_visit_scaled + aru_visit_scaled)) # join the frequency data to species trait dat dat_median &lt;- left_join(median_pf, trait, by = &quot;eBird_codes&quot;) # join the above dataframe to the detections dataset visit_detections &lt;- left_join(dat_median[,c(1:3)], visit_detections, by = &quot;scientific_name&quot;) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # removing outliers prior to visualization visit_detections &lt;- visit_detections %&gt;% filter(eBird_codes != &quot;PBFL&quot;) # Pale-billed flowerpecker # visualization fig_medFreq &lt;- grouped_ggscatterstats( data = visit_detections, x = median_peak_freq, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medFreq, filename = &quot;figs/fig_medianPeakFreq_detectionRatio_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Marginal associations - no real support seen. 15.7 Exploring center frequency instead of peak frequency # calculate median center frequency with the list of species that have a minimum of 10 templates median_cf &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% summarise(median_center_freq = median(center_freq_in_Hz)) # create a single dataframe for visit_detections visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0, pc_visit_scaled = 0, aru_visit_scaled = 0)) visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_scaled)/ (pc_visit_scaled + aru_visit_scaled)) # join this dataframe to species trait dat dat_median_cf &lt;- left_join(median_cf, trait, by = &quot;eBird_codes&quot;) # join the above dataframe to the detections dataset visit_detections &lt;- left_join(dat_median_cf[,c(1:3)], visit_detections, by = &quot;scientific_name&quot;) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # removing outliers prior to visualization visit_detections &lt;- visit_detections %&gt;% filter(eBird_codes != &quot;PBFL&quot;) # Pale-billed flowerpecker # visualization fig_medCenterFreq &lt;- grouped_ggscatterstats( data = visit_detections, x = median_center_freq, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_medCenterFreq, filename = &quot;figs/fig_medianCenterFreq_detectionRatio_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Results are similar for the calculation of median peak frequency 15.8 Amplitude Here, we extract peak amplitude data and explore similar analyses as before. Specifically, we will extract the median of the 95th percentile of values. # calculate median peak amplitude with the list of species that have a minimum of 10 templates # we will specifically extract the max/median of the 95th percentile of values of pek amplitude (using the quantile function) peak_amp &lt;- freq_10 %&gt;% group_by(eBird_codes) %&gt;% filter(peak_amp &gt;= quantile(peak_amp, 0.95, na.rm = T)) %&gt;% summarise(median_peak_amp = median(peak_amp)) # create a single dataframe for visit_detections visit_detections &lt;- full_join(pc_visit_detections[,-5], aru_visit_detections[,-5]) %&gt;% replace_na(list(pc_visit_detections = 0, aru_visit_detections = 0, pc_visit_scaled = 0, aru_visit_scaled = 0)) visit_detections &lt;- visit_detections %&gt;% mutate(pc_to_total = (pc_visit_scaled)/ (pc_visit_scaled + aru_visit_scaled)) # join this dataframe to species trait dat dat_peak_amp &lt;- left_join(peak_amp, trait, by = &quot;eBird_codes&quot;) # join the above dataframe to the detections dataset visit_detections &lt;- left_join(dat_peak_amp[,c(1:3)], visit_detections, by = &quot;scientific_name&quot;) # reordering factors for plotting visit_detections$restoration_type &lt;- factor(visit_detections$restoration_type, levels = c(&quot;BM&quot;, &quot;AR&quot;, &quot;NR&quot;)) # visualization fig_peakAmp &lt;- grouped_ggscatterstats( data = visit_detections, x = median_peak_amp, y = pc_to_total, grouping.var = restoration_type, type = &quot;r&quot;, plotgrid.args = list(nrow = 3, ncol = 1), ggplot.component = list(theme(text = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 18, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_text(family = &quot;Century Gothic&quot;, size = 15, face = &quot;bold&quot;)))) ggsave(fig_peakAmp, filename = &quot;figs/fig_medianPeakAmplitude_detectionRatio_correlations.png&quot;, width = 14, height = 16, device = png(), units = &quot;in&quot;, dpi = 300) dev.off() Results are similar for the calculation of median peak frequency "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
